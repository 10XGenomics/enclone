
This file contains enclone options that are not in the online documentation for enclone.  They are 
here for a reason, for example, maybe they are buggy, or untested, or of dubious utility, or 
intended for debugging purposes only, or only work from a 10x server, etc.

Use at your own risk, ha ha.

Optional arguments controlling printing of join events:
- SEQ: print sequences of contigs, before truncation to V..J
- ANN: print annotations of contig
- ANN0: print annotations of contig, after truncation to V..J
- PFREQ=n: show data for 1/n joins even if correct
- SHOW_BC: show barcodes
- PRINT_FAILED_JOINS: print failed join events.

Optional arguments that control clonotype filtering:
- WHITEF: only show clonotypes that exhibit whitelist contamination
- PROTECT_BADS: don't delete putatively bad stuff
- FAIL_ONLY=true or false: only print failed clonotypes in the true case
- VDUP: only show clonotypes having two chains with the same V segment
- HAVE_ONESIE: only show clonotypes including a onesie exact subclonotype

Optional arguments that control miscellaneous logging:
- DESCRIP: print sample descriptions, and also reference info
- REUSE: print barcode reuse (that might arise from index hopping)
- EXACT=n: print some data about exact subclonotype n.

Optional arguments controlling logging for alternate alleles:
- CON: print alternate consensus sequences
- CON_TRACE: tracing for CON.

Optional arguments that control the joining algorithm:
- MIN_MULT: to document
- MIN_ALT: to document
- BCJOIN: substitute an algorithm that joins by barcode identity and ignores everything
          else -- only useful for studying two datasets from the same GEM well that used
          different enrichment protocols.

Optional arguments governing input and output files:
- EXFASTA=f: dump fasta file f for V..J exact subclonotypes.

Optional arguments that control printing of individual clonotypes:
- white   = percent of sequences implicated in whitelist expansion.
- CHAIN_BRIEF: show abbreviated chain column headers
- DEBUG_TABLE_PRINTING: add print lines to help debug printing of tables.
- NOTE_SIMPLE: note if the first sequence for the chain is simple, in the sense that it exactly 
               equals the concatenation of the right-truncated V with the full J segment.

Other optional arguments:
- FORCE: make joins even if redundant
- EXP: exploratory code for exact clonotyping on
- WEAK: for EXP, print all and show weaks
- GRAPH: show logging from light-heavy graph construction
- UTR_CON: run experimental UTR consensus code
- CON_CON: run experimental constant region consensus code
- NSILENT: turn on extra logging
- RE: reannotate instead of using the annotation in the json file, useful for two purposes:
      1. If you have a json file generated by an outdated code version;
      2. You want to see the effect of changed annotation code.
- NPLAIN: reverses PLAIN
- INDELS: search for and list CDR3s from clonotypes with possible SHM indels (exploratory)
- INSERTIONS: search for and list CDR3s from clonotypes with possible SHM insertions (exploratory)
- NOPRETTY: turn off pretty trace entirely
- HEAVY_CHAIN_REUSE: look for instances of heavy chain reuse
- BINARY=filename: generate binary output file
- PROTO=filename: generate proto output file
- PROTO_METADATA=filename: pass JSON metadata file for proto generation (origin,donor)
- DUMP_INTERNAL_IDS: special option to dump the list of internal ids and exit.
- TOY: toy with phylogeny

If an argument is a nonnegative integer, it is treated as if specified by TCR= or BCR=, but 
without setting one of them.  Nonnegative integers are recognized as 10x dataset identifiers 
("sample IDs") and their location is automatically found.  Inclusive ranges l1-l2 are 
expanded out.

CELLRANGER: for use if called from cellranger -- changes failure message and prevents exit
            upon normal completion

EXT=filename:
Given output of an external clonotyping algorithm which took as inputs the pipeline outputs 
for the lenas in enclone.testdata, for each exact subclonotype found by enclone, report its 
composition in the external clonotyping, as clonotype_id[count], ...
The input file should have lines of the form:
sample barcode clonotype_id.

SUMMARY_CLEAN: if SUMMARY specified, don't show computational performance stats, so 
we can regress on output

ACCEPT_INCONSISTENT: temporary option to accept inconsistent reference/annotations and feature refs

CURRENT_REF: temp option to force CR 4.0 reference

H5_SLICE: read GEX data slice by slice rather than preloading
H5: force use of H5, even if feature_barcode_matrix.bin has been built

FORCE_EXTERNAL: do not test for internal run

STABLE_DOC: print documentation in a way that it won't change when the git version changes

LVARS entries
* entropy = for each cell, take the sum over all genes of -q/log2(q), where q is the fraction of 
  total gene UMIs in the given gene; for an exact subclonotype report the median of these values
* clust = cluster id, from analysis_csv/clustering/graphclust/clusters.csv
  (for now, has to be in that exact place; not implemented for PCELL)
* type = cell type, from analysis_csv/celltypes/celltypes.csv
  Note that it's not clear how doublets are handled.
* pe<n> = PCA equivalence class at distance ≤ n, where n is an integer: it shows the equivalence
  class on all cells in a single clonotype when two cells are called equivalent if their distance
  in PCA space is ≤ n.  This is only implemented for PER_CELL.
  This uses the file analysis_csv/pca/10_components/projection.csv.
  WARNING: this only makes sense if you have one dataset--this condition is not checked.
- npe<n> = total number of cells in this clonotype that are within PCA distance n of this cell
- ppe<n> = percent of all gex cells within PCA distance n of this cell that are in this clonotype

IMGT: specify the IMGT reference, forces RE so slow
How this reference was created
- go into a new directory
- /mnt/home/jaffe/repos/cellranger/lib/bin/fetch-imgt --genome human-imgt-20200415
- mkvdjref --genome=vdj_IMGT_human_20200415 --seqs=human-imgt-20200415-mkvdjref-input.fasta
- also for mouse

IMGT_FIX: make certain hardcoded fixes to the IMGT reference.

SVG: render output as svg, clonotype by clonotype.  There are problems with this:
1. Safari does not correctly render these svg files.
2. The svg files use the Menlo font, which works on a Mac but is not universally available.
3. We don't render background, so this is broken for PER_CELL.

TRACE_BARCODE: print some additional information for this particular barcode

SUMMARY_CSV: nascent option to emit some summary information as CSV output

A complex of related experimental stuff:
- BASELINE: show stats relevant to NUMI and the the following two options
- UMI_FILT_MARK: mark cells based on these stats; view with undocumented lvar "mark"
  and only viewable with PER_CELL
Do not use UMI_FILT_MARK without NUMI.

UMI_RATIO_FILT_MARK

NON_CELL_MARK (only makes sense if you run NCELL)

ECHO: echo command

---------------------------------------------------------------------------------------------------

MARK_STATS: generate three statistics (assumes GEX data included):
1. number of dubious cells, where dubious means not classified as a B cell, or in a clonotype for 
   which the ratio of the top dataset cells to the runner up dataset cells is at least 10 
   (e.g. 3:0 works as does 10:1)
2. number of cells that are marked (in selected clonotypes)
3. of these, number that are "good", defined as
   - that are in a clonotype having cells from >= 2 datasets
   - and which GEX classifies as B cell
   - and which have 2 or 3 chains.

MARK_STATS2: generate four statistics (assumes GEX data included):
1. number of fake expanded clonotype cells, defined as all but one cell in clonotypes for
   which the ratio of the top dataset cells to the runner up dataset cells is at least 10
2. number of these cells that are marked by the filter (ADVANTAGE)
3. number of good expanded clonotype cells, defined as cells in clonotypes having at least 10 
   cells, called a B cell by GEX, having 2 or 3 chains, and not fake as above
2. number of these cells that are marked by the filter (DISADVANTAGE)
[The motivation for this, as distinct from MARK_STATS, is that (1) now consists of just cells in
fake expanded clonotypes, and not just all dubious cells, would could be a substantially larger
set.  This allows the analysis of the effect of a filter on fake expanded clonotypes.]
*** THIS SHOULD BE RUN WITH NGEX AND NCROSS. ***

---------------------------------------------------------------------------------------------------

BI=n, where 1 <= n <= 13 (for now):
load BCR and GEX from datasets described in enclone.testdata.bcr.gex
(This only works internally where we have these datasets available.)
(BI short for "built-in".)

PRINT_CPU: print number of cpu cycles used
PRINT_CPU_INFO: print info about cpu usage

recognizes S<xena_analysis_set_id>

PLOT_BY_MARK

n_b as LVAR = number of B cells

MAX_SCORE: was public, now deprecated, do not remove

REQUIRE_UNBROKEN_OK: require that if a V reference sequence is not marked as broken, then all
its features can be computed, and exit after this test

NALL_GEX: turn off all filters except GEX filter

REPROD: accept nonproductive contigs, recompute productive, then reject nonproductive

SPLIT_COMMAND: assuming that BCR and GEX have been provided with multiple entries each, split out 
separate commands having them specified one by one, and run them, then exit

OPTIONS THAT ALLOW METRIC VALUES TO BE LOCKED

REQUIRED_FPS=n: exit(1) if the number of false positives is not n; here we define a false
positive to be a clonotype that contains cells from multiple donors.

REQUIRED_CELLS=n: exit(1) if the number of cells in clonotypes is not n

REQUIRED_CLONOTYPES=n: exit(1) if the number of clonotypes is not n

REQUIRED_DONORS=n: exit(1) if the number of donors is not n

REQUIRED_TWO_CELL_CLONOTYPES=n: exit(1) if the number of clonotypes having >= 2 cells is not n

REQUIRED_TWO_CHAIN_CLONOTYPES=n: exit(1) if the number of two chain clonotypes is not n

REQUIRED_DATASETS=n: exit(1) if the number of datasets is not n

===================================================================================================

asymmetric grouping options (work in progress, will document publicly once stable)

This is a BARE MINIMAL implementation, for testing to see whether the system works as described.  
More options will likely be needed to test for actual utility.

AGROUP: turn on asymmetric grouping.  Unlike the other ("symmetric") grouping options, this option 
creates clonotype groups that may overlap.  Asymmetric grouping requires the definition of
"center clonotypes", a "distance formula", and a "distance bound".  Each group will then consist
of the center clonotype (which comes first), followed by, in order by distance (relative to the
formula), all those clonotypes that satisfy the distance bound (with ties broken arbitrarily).
For each clonotype in a group, we print its distance from the first clonotype, and this is also
available as a parseable variable dist_center.

Center clonotypes.  These are in principle any set of clonotypes.  Initially, we allow two options
AG_CENTER=from_filters
which causes all the filters described at "enclone help filters" to NOT filter clonotypes in
the usual way, but instead filter to define the center, and
AG_CENTER=copy_filters
which effectively does nothing -- it just says that filters apply to all clonotypes, whether
in the center or not.  In addition, in both cases, only clonotypes containing
cells from donor d1 are placed in the center.

Please note that asymmetric grouping is very time consuming, and run time is roughly a linear
function of (number of center clonotypes) * (number of clonotypes).  So it is advisable to
restrict the number of center clonotypes.

Below, for TCR, "heavy chain" means TRB, and "light chain" means TRA.

Distance formula.  This could in principle be any function that takes as input two clonotypes
and returns a number.  Initially we allow only
AG_DIST_FORMULA=cdr3_edit_distance
which is the "Levenshtein CDR3 edit distance between two clonotypes".  This is the minimum, over 
all pairs of exact subclonotypes, one from each of the two clonotypes, of the
"Levenshtein CDR3 edit distance between two exact subclonotypes".  This is the sum, over all
pairs of heavy chains, one from each of the two exact subclonotypes, of the Levenshtein edit
distance between the CDR3 sequences for the heavy chains, plus the same for light chains.
Exact subclonotypes that lack a heavy or a light chain are ignored by this computation.
Also the distance between two clonotypes is declared infinite if one of them lacks a heavy chain
or one of them lacks a light chain.

Distance bound.  Initially we allow the following two forms:
AG_DIST_BOUND=top=n
which returns the top n clonotypes
and
AG_DIST_BOUND=max=d
which returns all clonotypes having distance ≤ d from the center clonotype.

Asymmetric group respects the MIN_GROUP option.

===================================================================================================

GD_BC=x
translates into BC=x/outs/genetic_demux_results/clusters.tsv
to allow for convenient use of genetic demux results in the PD pipeline

cvar nval = number of validated umis

===================================================================================================

CLONOTYPE_GROUP_NAMES=filename
* The file should be a a CSV file with that includes fields new_group_name and group_id.  This is
  confusing nomenclature, see what follows.
* The group_id should be obtained by running enclone WITHOUT grouping, so that there is exactly 
  one clonotype per group.
* The new_group_name is the name of a group (of your own concoction) that you are assigning a 
  clonotype to.
* A clonotype may not be assigned to more than one group.
* The idea is that one would run enclone once to gather information that would
  allow grouping of clonotypes.  Then run it as second time with this argument.
* The argument only does something if honeycomb plotting is used.  In that case, the honeycomb
  plot is split by group and each group is given a different (light) background color.
* Clonotypes that are not assigned to a group are not displayed.

===================================================================================================

read utilization - This is a stat generated with the SUMMARY option, in internal mode.  It is the
fraction of reads that are assigned to chains by enclone.  It has the following issues:
1. It doesn't account for reads that are lost because of capping in assembly.  Internally, we
can work around this by removing the capping on a cellranger branch.  (Done now.)
2. It would not be correct if read one was significantly longer than 28 bases, so that it could 
contribute to assembly.

NO_UNCAP_SIM: turn off uncapping simulation

===================================================================================================

HAPS_DEBUG: turn on debug mode for the HAPS option
HAPS_JOIN=iterations,sep: single-thread the join parallel loop and profile it
