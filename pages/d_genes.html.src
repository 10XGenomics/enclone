<title>D genes and junction regions</title>

<body>

<br>
<a href="../../index.html#help">
<img src="../../img/enclone_banner.png" alt="enclone banner" title="enclone banner" width=100% />
</a>

<h1>D genes and junction regions</h1>

<p>#enclone has some tools for understanding D gene assignment and junction region structure.</p>

<hr>

<p>#enclone can assign D genes to each IGH or TRB exact subclonotype, independent of the 
assignment made by Cell Ranger.  Every such exact subclonotype is assigned the optimal D gene, 
or two D genes (in a VDDJ) configuration, or none, depending on score.  The none case is
applied only when no insertion is observed.</p>

<p style="border: 2px; border-style: solid; border-color: black; background-color: #EBF4FC;
padding: 8px; width: 900px; font-size: 110%">
In general, although D genes are always assigned, they cannot be assigned confidently.
<br>• <b>This is a consequence of the biology: D genes are short, and junction regions can be 
      heavily edited during SHM and through non-templated indels during VDJ recombination, so in 
      general it is just not possible to know.</b>
<br>• The reason we make these assignments, even though they are not confident, is that in general 
      they allow one to better understand what happened during junction
      region rearrangement, even though that understanding is often incomplete.
<br>• D gene assignments are not guaranteed to be consistent across a clonotype.  
<br>• We have no way of knowing the true error rate in D gene assignment.  However because on
      very large data sets we observe an inconsistency rate within clonotypes of 
      <code>~13%</code>, we very roughly estimate the error rate for D gene assignment at
      <code>5-15%</code>.  Note of course that the true rate would likely 
      depend on sample properties including the rate of SHM.
</p>

<hr>

<p>There are variables that show the best and second best D gene assignment, and the difference
in score between them, see
<a href="../../pages/auto/help.cvars.html"><code>enclone help cvars</code></a>.  Here is an
example:</p>

<pre><code>enclone BCR=123085 CVARS=d1_name,d2_name,d_Δ CDR3=CTRDRDLRGATDAFDIW</code></pre>
#include pages/auto/d_gene_example1.html

</p>
In this example, the D genes are assigned consistently across the clonotype.  Here is an example
where they are assigned inconsistently:
</p>

<pre><code>enclone BCR=123085 CVARS=d1_name,d2_name,d_Δ CDR3=CAREGGVGVVTATDWYFDLW COMPLETE
</code></pre>
#include pages/auto/d_gene_example1b.html

<p>#enclone can
compute the rate at which D genes are <i>inconsistently</i> assigned across all the data.  This
is the probability, given two different exact subclonotypes from the same clonotype, that their
heavy chains are assigned different D genes.  Here you can see the rate:</p>

<pre><code>enclone BCR=123085 GVARS=d_inconsistent_%,d_inconsistent_n NOPRINT</code></pre>
#include pages/auto/d_gene_example2.html

<p>The second variable is the sample size: the number of pairs of exact subclonotypes that
were examined.</p>

<p>The inconsistency rate for this dataset is deceptively low, perhaps because the sample size is 
too small.  For larger datasets we see a rate of around 13%, however the rate likely depends on 
the particular samples, and not just the sample size.  The option <code>D_INCONSISTENT</code> can 
be used to show only those clonotypes having D gene assignment inconsistencies.</p>

<hr>

<p>
For any chain in any exact subclonotype, #enclone can display the alignment of the entire V..J 
sequence to the reference V..J sequence, and it can also display the alignment of just the 
junction region (extended by a small and arbitrary amount on both ends to get the display to
work).  This feature is enabled by adding 
<code>ALIGN&ltn></code> or
<code>JALIGN&ltn></code> to the command line, where <code>n</code> is the chain number.  It
displays one alignment per exact subclonotype, so for brevity we'll show examples where there is 
just one.  Here is an example for the full alignment:
</p>

<pre><code>enclone BCR=123085 ALIGN1 CDR3=CARYIVVVVAATINVGWFDPW CVARSP=d1_name</code></pre>
#include pages/auto/align_example.html

<p>
And here is the same example, but showing just the junction region:
</p>

<pre><code>enclone BCR=123085 JALIGN1 CDR3=CARYIVVVVAATINVGWFDPW CVARSP=d1_name</code></pre>
#include pages/auto/jun_align_example.html

<p>For <code>JALIGN</code>, we show a line of amino acids that represent the translation of
bases in the exact subclonotype sequence.  The amino acid lies over the middle base of the
corresponding codon.</p>

<p>There are also options <code>ALIGN_2ND&ltn></code> 
and <code>JALIGN_2ND&ltn></code> to instead use the second best D segments.</p>

<p>Here is an example showing a VDDJ clonotype:</p>

<pre><code>enclone BCR=165808 JALIGN1 CDR3=CARAYDILTGYYERGYSYGWGFDYW</code></pre>
#include pages/auto/vddj.html

<p>For VDDJ clonotypes, we do not check that the two D genes are in order on the
genome, which would make sense biologically.  We do not carry out the check because an individual
genome might be rearranged, and in an case, we are simply reporting what we observe.</p>

<hr>

<h2>How the algorithm works</h2>

<p>The problems we are solving here are to (a) pick the "best" reference D segment, in the case of
IGH or TRB, and (b) exhibit the "correct" alignment of the transcript to the concatenated
reference.</p>

<p>
The algorithm aligns the V(D)J region on a transcript to the concatenated V(D)J reference, allowing
for each possible D reference segment (or the null D segment, or DD), in the case of IGH or TRB.  
These alignments are carried out using the following scoring scheme:
</p>

<p>
<table rules="all" cellpadding="6" style="border: 1px solid black">
<tr><td> <b>case</b>                       </td><td> <b>score</b>      </td></tr>
<tr><td> match                             </td><td>   2               </td></tr>
<tr><td> mismatch                          </td><td>  -2               </td></tr>
<tr><td> gap open for insertion between V/D/J segments   </td><td>  -4     </td></tr>
<tr><td> gap open for deletion bridging V/D/J segments   </td><td>  -4     </td></tr>
<tr><td> gap open (otherwise)              </td><td> -12               </td></tr>
<tr><td> gap extend for insertion between V/D/J segments </td><td>  -1     </td></tr>
<tr><td> gap extend (otherwise)            </td><td>  -2               </td></tr>
</table>
</p>

<p>To the score from this, we add <code>2.2</code> times a "bit score" for the alignment,
defined as <code>-log2</code> of the probability that a random DNA sequence of length n will match 
a given DNA sequence with ≤ k mismatches = <code>sum{l=0..=k} (n choose l) * 3^l / 4^n</code>.</p>

<p>The alignment that is produced is approximately optimal, relative to this scoring scheme.  It
is not exactly optimal because we first produce an alignment using a Smith-Waterman algorithm,
which does not fully incorporate the complexity of the scoring scheme, and then edit both the
alignment and its score.</p>

<p>Then the D segment having 
the highest score is selected, arbitrarily selecting a winner in the case of a tie.</p>

<p>The following were optimized in designing the algorithm:
<ul>
<li>the inconsistency rate for a large dataset (over a million cells)</li>
<li>placement of indels (manual examination)</li>
<li>consistency with IgBLAST, or if not, justifiable difference from it.</li>
</ul>
However, there is no rigorous way to balance these criteria.  The algorithm is not optimal
but it is unclear how one would decide that a new algorithm was better.
</p>

<p>In more detail, here is how we assess the inconsistency rate.  There are two issues.  First,
if one allows clonotypes having a large number of exact subclonotypes, then measurement is noisy
because a single clonotype can overly influence the rate.  For this reason, we restrict to
clonotypes having at most <code>10</code> exact subclonotypes.  Second, for experimental purposes,
it is too slow to keep recomputing using a very large dataset.  Therefore we do the following
(with a large dataset substituted in):
</p>

<pre><code>enclone BCR=... SUBSET_JSON=subset/outs/all_contig_annotations.json NOPRINT MIN_EXACTS=2 MAX_EXACTS=10</code></pre>

<p>which is slow, followed by:</p>

<pre><code>enclone BCR=subset GVARS=d_inconsistent_%,d_inconsistent_n NOPRINT</code></pre>

<p>which is much faster, to get an inconsistency rate.</p>

<hr>

<h2>References for VDDJ recombination</h2>

<p>
<ol>
<li>Briney, B.S. et al. 2012. 
    <a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3449247/pdf/imm0137-0056.pdf">Frequency 
    and genetic characterization of V(DD)J recombinants in the 
    human peripheral blood antibody repertoire</a>. <b>Immunology</b>.</li>
<li>Briney, B.S. et al. 2013. 
    <a href="https://www.frontiersin.org/articles/10.3389/fimmu.2013.00042/full">Secondary 
    mechanisms of diversification in the human antibody 
    repertoire</a>. <b>Frontiers in Immunology</b>.</li>
<li>Safonova Y. et al. 2019. 
    <a href="https://www.frontiersin.org/articles/10.3389/fimmu.2019.00987/full">De novo Inference 
    of Diversity Genes and Analysis of Non-canonical V(DD)J Recombination in Immunoglobulins</a>. 
    <b>Frontiers in Immunology</b>.</li>
<li>Safonova Y. et al. 2020. <a href="https://genome.cshlp.org/content/30/11/1547.short">V(DD)J 
    recombination is an important and evolutionarily conserved 
    mechanism for generating antibodies with unusually long CDR3s</a>. <b>Genome Research</b>.</li>
</ol>
</p>

</body>
</html>
