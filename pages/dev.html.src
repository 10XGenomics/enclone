<title>enclone developers guide</title>

<body>

<br>
<a href="../../index.html#help">
<img src="../../img/enclone_banner.png" alt="enclone banner" title="enclone banner" width=100% />
</a>

<! –– ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ -->

<p>This is a guide for #enclone developers, both inside and outside 10x Genomics.</p>

<p style="border: 2px; border-style: solid; border-color: black; padding: 8px;">
There is no reason to read this, unless you want to experimentally modify #enclone, or are 
curious.  We distribute pre-built binaries for #enclone, and that's all you need if you just
want to run the existing code.
</p>

<hr><h2>The #enclone components</h2>

<p>#enclone has the following software and data components:
<ul>

<li>
A GitHub repo
<a href="https://github.com/10XGenomics/enclone">
https://github.com/10XGenomics/enclone
</a>
that is maintained by 10x Genomics.  Contributions are welcome.  The software is licensed freely, 
however only for use with 10x Genomics data.  Please read the 
<a href="../../LICENSE.txt">license</a>.
</li>

<li>
A web site <a href="https://10xgenomics.github.io/enclone">
https://10xgenomics.github.io/enclone
</a>
that is built automatically by code in the above repo.
</li>

<li>
A separate GitHub repo
<a href="https://github.com/10XGenomics/enclone-data">
https://10xgenomics.github.io/enclone-data
</a>
that contains some datasets.  If you build #enclone, this is automatically
downloaded as part of the build process.  If you install #enclone, this is downloaded into
a separate location (<code>~/enclone</code>), unless you 
choose the <code>small</code> option, in which case you get only a subset of it.  The reason
for having a separate repo for data is to keep the #enclone repo itself small.
</li>

<li>
A larger collection of datasets that are downloaded if you install with the <code>large</code>
option; the <code>colossus</code> option results in downloading of additional GEX data.
</li>

</ul>
</p>

<! –– ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ -->

<hr><h2>Software architecture</h2>

<p>#enclone is written in Rust.</p>

<p>We used Rust because the language makes it extremely easy to use Rust code written by
other people, because Rust has its own build system, and because it is fast and safe.</p>

<p>Technical details.  The repo is itself a Rust workspace, with a several
subdirectories that comprise Rust crates.  Each of these crates has its own 
<code>Cargo.toml</code> file.  Modification of dependency
versions in these files files is done by modifying a file <code>master.toml</code> at the
top level,
and then typing <code>sync_to_master</code>, which invokes a program (part of the repo) to
sync each <code>Cargo.toml</code> to <code>master.toml</code>.
</p>

<! –– ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ -->

<hr><h2>Prerequisites</h2>

<p>#enclone can be built and run on an x86-64 Linux server or a Mac.  It can also be built 
under Windows, but we do not provide instructions for this.</p>

<p>The following software are needed to build and test #enclone:

<ul>

<li><code>Rust</code>.  Detailed instructions on how to install Rust
can be found <a href="https://www.rust-lang.org/tools/install" rel="nofollow">here</a>. You can 
confirm that you have successfully installed the Rust compiler by running 
<code>rustc --version</code>.</li>

<li><code>cargo-license</code>.  Probably this is needed only for internal use.  You can install 
it using
<code>cargo install cargo-license</code>, assuming that you have already installed Rust.</li>

<li><code>cargo-sweep</code>.  Install via <code>cargo install cargo-sweep</code>.</li>

<li>standard utilities, including <code>git</code>, <code>curl</code> and <code>wget</code></li>

<li><code>samtools</code>.</li>

</ul>

</p>

<! –– ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ -->

<hr><h2>Building #enclone</h2>

<ol>

<li>Follow the installation instructions on the main page to install #enclone, using the
large option.  Doing this downloads data, which you will want for experimentation and testing.
If you are developing the code, then the downloaded #enclone binary is superfluous, but you do
need to follow the download process to get test data, unless you are at 10x Genomics.  In that
case the data will be accessible to you in a shared location.
</li>

<li>If you are using a Mac, you may need to install the xcode tools.  The standard way to do 
this is to type <code>xcode-select --install</code>, however this can be very slow.  An alternative
method is to get the package from the Apple developer site at 
<a href="https://developer.apple.com/download/all/?q=xcode">https://developer.apple.com/download/all/?q=xcode</a>.  Downloading and installing from there still takes some time, but at a minimum,
it is more transparent in what it's doing.</li>

<li>There are a couple of minor prerequisites.  If you're using <code>homebrew</code>, you can 
install these as follows:
<br><code>brew install graphviz</code>
<br><code>brew install samtools</code>
</li>

<li>
Go to a directory where you want to put the #enclone code, and
clone the <code>enclone</code> repository using
<pre><code>git clone git@github.com:10XGenomics/enclone.git</code></pre>
If you have a very slow internet connection, you might wish to download only the current version
(and not the history) using
<pre><code>git clone --depth=1 git@github.com:10XGenomics/enclone.git</code></pre>
</li>

<li>Type <code>cd enclone</code> and then <code>./build</code>.  Depending on your computer, this
will take roughly 5-10 minutes.  Subsequent invocations (after code changes) will be much 
faster.  You can also run <code>cargo b</code>, which is faster, but omits some steps.
Please let us know if you encounter difficulties with compilation.</li>

<li>Add the full path of <code>enclone/target/debug</code> to your <code>PATH</code>, and 
make sure this comes <i>before</i> <code>~/bin</code>, which was where the precompiled
version of #enclone was downloaded by the install command.  You may need to close and reopen
your terminal window to get the change to <code>PATH</code> to take effect.</li>

<li>Now when you type #enclone, you'll get the version you just compiled.</li>

</ol>

<! –– ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ -->

<hr><h2>Testing #enclone</h2>

<p>#enclone has an extensive test suite, with three components as described here:</p>

<table rules="all" cellpadding="3" style="border: 1px solid black">
<tbody>

<tr>
<th align="left" style="width:20px">#</td>
<th align="left" style="width:50px">command</td>
<th align="left" style="width:150px">content</td>
<th align="left" style="width:50px">minutes: large Linux server</td>
<th align="left" style="width:50px">minutes: Mac</td>
<th align="left" style="width:200px">CI coverage</td>
<th align="left" style="width:50px">minutes: CI</td>
</tr>

<tr>
<td align="left">1</td>
<td align="left"><code>./test</code></td>
<td align="left">hundreds of small tests</td>
<td align="left">2</td>
<td align="left">7</td>
<td align="left">partial, but runs on both Linux and Mac (running all tests on Mac is overkill)</td>
<td align="left" rowspan=2>60</td>
</tr>

<tr>
<td align="left">2</td>
<td align="left"><code>enclone.test</code></td>
<td align="left">one big test</td>
<td align="left">2.5</td>
<td align="left">N/A</td>
<td align="left">full</td>
</tr>

<tr>
<td align="left">3</td>
<td align="left"><code>test_vis</code></td>
<td align="left">many tests of #enclone_visual using screenshots</td>
<td align="left">N/A</td>
<td align="left">1</td>
<td align="left">none</td>
<td align="left">N/A</td>
</tr>

</tbody>
</table>

<p>To varying degrees, the tests can either be run from the command line or through a CI which
is triggered by pull requests.  The CI runs via GitHub Actions and Jenkins.  Because it is so slow 
we tend not to use it.  The GitHub Actions part of the CI test is given by
<code>.github/workflows/test.yaml</code>.  We strongly encourage that when tests are added to the
CI, they are also added to test 1, as otherwise we force people to use the CI to test code
changes.</p>

<p><b>Notes on test 1.</b>
<ul>
<li>An individual test can be run e.g. by <code>cargo t test_enclone_d</code>.</li>
<li>The last part just checks that the total wallclock for the entire test is
within bounds.  This is obviously dependent on the server that is used and system load.  It is 
currently calibrated for use on one large Linux server at 10x.</li>
<li>The test will fail sporadically because it tests for broken links on the site, and some of 
those links break transiently, sometimes for about a day.  To run the tests without testing links, 
one can use <code>./test linkless</code>.</li>
<li>There are a few subtests that only run under Linux.</li>
<li>See the following files:
    <ul>
    <li> <code>enclone_core/src/testlist.rs</code></li>
    <li> <code>enclone_main/tests/enclone_test*.rs</code></li>
    <li> <code>test</code></code></li>
    <li> <code>.cargo/config</code>.</li>
    </ul>
</ul>
</p>

<p><b>Notes on test 2.</b>  See the file <code>enclone/enclone.test</code>.</p>

<p><b>Notes on test 3.</b>
<ul>
<li>This takes over the Mac while running.  It uses regression test images that are somewhat 
specific to a particular desktop, so the test may only work verbatim for one person.  However 
other people can run the test with their own personal regression test images.</li>
<li>There is an annoying little bit.  When run at 10x Genomics, the code connects to a Linux server
and uses the code there as part of the test process.  To get versions fully synced, you need to 
<code>touch enclone/enclone_core/defs.rs</code> on the Linux server and then <code>cargo b</code>.
Otherwise you’ll get an error message.</li>
<li>See the file <code>enclone_visual/src/bin/test_vis.rs</code>.</li>
</ul>
</p>

<p>There are miscellaneous gnarly issues that we do not have automated testing for:
<ul>
<li>The code for <code>NOPAGER</code> accidentally broke at one point and we
    don't want that to recur.  Some test cases that could be verified:
    <ul>
    <li><code>enclone BCR=...</code></li>
    <li><code>enclone BCR=... NOPAGER</code></li>
    <li><code>enclone help all</code></li>
    <li><code>enclone help all NOPAGER</code></li>
    <li><code>enclone help faq</code></li>
    <li><code>enclone help faq NOPAGER</code>.</li>
    </ul>
</li>
<li>In OS X Catalina, in full screen mode, at one point enclone appeared to have no output,
    because the output was going to the alternate screen.</li>
<li>We allow paths that start with ~ or ~user_name, but do not have automated testing for this.</li>
<li>We had buggy behavior that when #enclone was called from a terminal window, and it failed,
    it returned zero exit status, even though when called e.g. from a script, it would return
    a nonzero value.
</li>
<li>Manual tests listed at the bottom of <code>enclone_visual/src/testsuite.rs</code>.</li>
</ul>
</p>

<table>
<tr>
<th align=left style="padding: 3px; font-weight: normal; border: 2px solid black">
There are some other major things that are not tested:
<ul>
<li>Compilation of #enclone under Windows.</li>
<li>Functionality of #enclone_visual under Linux and Windows.</li>
<li>Functionality of <code>hdf5</code> under Windows (which was previously broken).</li>
</ul>
</th>
</tr>
</table>

<! –– ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ -->

<hr><h2>Profiling #enclone</h2>

<p>#enclone provides a few built-in mechanisms for profiling:</p>
<ol>

<li>Add the argument <code>COMP</code> to your command.  This yields a summary of wall-clock
time by code section, and also tracks peak memory usage.  There is also a version
<code>COMP2</code> that prints a bit more.  Run this with <code>NOPAGER</code> if you want
to see the lines printed as they happen.</li>

<li>Add the argument <code>PROFILE</code> to your command.  This yields a list of tracebacks
based on random interrupts.  These tracebacks are manicured and each is shown with its
multiplicity.  When this option is used, the internal paging mechanism in #enclone is turned
off, and you may wish to pipe the output to <code>less -r</code>.</li>

<li>Add the argument <code>CTRLC</code> to your command.  Then upon CTRL-C, execution will
be stopped and a traceback printed.  In general this is only useful if your code seems to
be extremely slow or perhaps is stuck in an infinite loop.</li>

</ol>
<p>It is usually convenient to add the argument <code>NOPRINT</code> when using these profiling
options, so as to suppress other output.</p>

<! –– ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ -->

<hr><h2>What could go wrong?</h2>

<p>If the code crashes, you should get a clean traceback.  If this happens on the distributed
version of #enclone or the master version, that's a bug that should be reported.</p>

<p>If you run out of disk space while building, you may get weird error messages from the linker,
in which case you should fix your disk space problem.  You might also need to
<code>cargo clean</code>.</p>

<p>Somewhat rarely, you'll get weird error messages from the linker, with no apparent reason.
If this happens, <code>cargo clean</code> should fix the problem.</p>

<! –– ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ -->

<hr><h2>Editing the #enclone web site</h2>

<p>This is done by editing the files in the subdirectory <code>pages</code>, and never by
editing <code>.html</code> files directly.  All the <code>.html</code> files are 
auto-generated.</p>

<p>There is a script <code>./local_view</code> that copies the site to 
your <code>public_html</code> directory so that it can be previewed.</p>

<! –– ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ -->

<hr><h2>Releasing #enclone</h2>

<p>#enclone binaries for OSX and Linux can be released by “pushing a button”.
This only works at 10x Genomics.</p>

<p>First, if the release warrants announcement, edit <code>pages/history.html.src</code> to note 
the relevant changes.  Running <code>build</code> will then update the actual file that goes on the
site.</p>

<p>Run the #enclone test suite.</p>

<p>From master on enclone, from a Linux server, type
<pre><code>start_release</code></pre>
This takes about five minutes.  It causes GitHub Actions to initiate creation of release binaries.
That takes about thirty-five minutes.  When <code>start_release</code> finishes, it launches 
<code>release_nanny</code> in the background, which at the appropriate time runs some final steps.
</p>

<! –– ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ -->

<hr><h2>Cross building for Windows on a Mac</h2>

<p>In principle the following should work:
<pre><code>rustup target add x86_64-pc-windows-gnu</code>
<code>cargo b --target=x86_64-pc-windows-gnu</code></pre>
but when we tested this, we got linker errors.  This should be resolvable but we're not sure how.
Also note that this will clobber the results of an ordinary <code>cargo b</code>.  In principle 
this can be avoided by specifying the target for it too.
</p>

</body>
</html>
