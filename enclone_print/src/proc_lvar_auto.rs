// Copyright (c) 2021 10x Genomics, Inc. All rights reserved.
// This file is auto-generated by the crate enclone_vars, please do not edit.

// use amino::*;
// use crate::print_utils1::*;
// use crate::print_utils3::*;
// use enclone_core::align_to_vdj_ref::*;
use enclone_core::defs::*;
// use enclone_core::median::*;
// use enclone_core::opt_d::*;
// use enclone_proto::types::*;
use itertools::Itertools;
// use stats_utils::*;
// use std::cmp::min;
use std::collections::HashMap;
// use string_utils::*;
use vdj_ann::refx::RefData;
use vector_utils::*;

pub fn proc_lvar_auto(
    i: usize,
    pass: usize,
    var: &String,
    exacts: &Vec<usize>,
    exact_clonotypes: &Vec<ExactClonotype>,
    u: usize,
    _rsi: &ColInfo,
    _refdata: &RefData,
    ctl: &EncloneControl,
    extra_args: &Vec<String>,
    out_data: &mut Vec<HashMap<String, String>>,
    stats: &mut Vec<(String, Vec<String>)>,
    lvars: &Vec<String>,
    row: &mut Vec<String>,
) -> Result<bool, String> {
    let clonotype_id = exacts[u];
    let ex = &exact_clonotypes[clonotype_id];
    let verbose = ctl.gen_opt.row_fill_verbose;

    macro_rules! speak {
        ($u:expr, $var:expr, $val:expr) => {
            if pass == 2 && (ctl.parseable_opt.pout.len() > 0 || extra_args.len() > 0) {
                let mut v = $var.to_string();
                v = v.replace("_Σ", "_sum");
                v = v.replace("_μ", "_mean");
                if ctl.parseable_opt.pcols.is_empty()
                    || bin_member(&ctl.parseable_opt.pcols_sortx, &v)
                    || bin_member(&extra_args, &v)
                {
                    out_data[$u].insert(v, $val);
                }
            }
        };
    }

    macro_rules! lvar_stats1 {
        ($i: expr, $var:expr, $val:expr) => {
            if verbose {
                eprint!("lvar {} ==> {}; ", $var, $val);
                eprintln!("$i = {}, lvars.len() = {}", $i, lvars.len());
            }
            if $i < lvars.len() {
                row.push($val)
            }
            if pass == 2 {
                speak!(u, $var.to_string(), $val);
            }
            stats.push(($var.to_string(), vec![$val; ex.ncells()]));
        };
    }

    let val = if false {
        (String::new(), Vec::<String>::new())
    } else if var == "datasets" {
        let mut datasets = Vec::<String>::new();
        for j in 0..ex.clones.len() {
            datasets.push(ctl.origin_info.dataset_id[ex.clones[j][0].dataset_index].clone());
        }
        let mut datasets_unique = datasets.clone();
        unique_sort(&mut datasets_unique);

        (format!("{}", datasets_unique.iter().format(",")), datasets)
    } else if var == "datasets_cell" {
        let mut datasets = Vec::<String>::new();
        for j in 0..ex.clones.len() {
            datasets.push(ctl.origin_info.dataset_id[ex.clones[j][0].dataset_index].clone());
        }
        let mut datasets_unique = datasets.clone();
        unique_sort(&mut datasets_unique);

        let _exact = format!("{}", datasets_unique.iter().format(","));
        (String::new(), datasets)
    } else {
        ("$UNDEFINED".to_string(), Vec::<String>::new())
    };
    if val.0 == "$UNDEFINED" {
        return Ok(false);
    } else {
        let (exact, cell) = &val;
        if exact.len() > 0 && !var.ends_with("_cell") {
            lvar_stats1![i, var, exact.to_string()];
        } else if cell.len() > 0 {
            if pass == 2 {
                speak!(u, var, format!("{}", cell.iter().format(POUT_SEP)));
            }
            stats.push((var.to_string(), cell.to_vec()));
        }
        return Ok(true);
    }
}
