// Copyright (c) 2021 10x Genomics, Inc. All rights reserved.
// This file is auto-generated by the crate enclone_vars, please do not edit.

use amino::*;
use enclone_core::defs::*;
use enclone_core::median::*;
use enclone_proto::types::*;
use itertools::Itertools;
use ndarray::s;
use regex::Regex;
use std::cmp::{max, min};
use std::collections::HashMap;
use string_utils::*;
use vdj_ann::refx::RefData;
use vector_utils::*;

pub fn proc_lvar_auto(
    i: usize,
    pass: usize,
    var: &String,
    exacts: &Vec<usize>,
    exact_clonotypes: &Vec<ExactClonotype>,
    u: usize,
    rsi: &ColInfo,
    refdata: &RefData,
    ctl: &EncloneControl,
    extra_args: &Vec<String>,
    out_data: &mut Vec<HashMap<String, String>>,
    stats: &mut Vec<(String, Vec<String>)>,
    lvars: &Vec<String>,
    row: &mut Vec<String>,
    fate: &Vec<HashMap<String, String>>,
    dref: &Vec<DonorReferenceItem>,
    varmat: &Vec<Vec<Vec<u8>>>,
    fp: &Vec<Vec<usize>>,
    n_vdj_gex: &Vec<usize>,
    vdj_cells: &Vec<Vec<String>>,
    gex_info: &GexInfo,
    groups: &HashMap<usize, Vec<usize>>,
    mults: &Vec<usize>,
    nd_fields: &Vec<String>,
    gex_counts_unsorted: &Vec<usize>,
    gex_fcounts_unsorted: &Vec<f64>,
    n_gexs: &Vec<usize>,
    d_readers: &Vec<Option<hdf5::Reader>>,
    ind_readers: &Vec<Option<hdf5::Reader>>,
    h5_data: &Vec<(usize, Vec<u32>, Vec<u32>)>,
    alt_bcs: &Vec<String>,
) -> Result<bool, String> {
    let clonotype_id = exacts[u];
    let ex = &exact_clonotypes[clonotype_id];
    let mat = &rsi.mat;
    let cols = varmat[0].len();
    let verbose = ctl.gen_opt.row_fill_verbose;
    let mut vname = var.clone();
    let mut abbr = var.clone();
    if var.contains(":") {
        abbr = var.before(":").to_string();
        vname = var.after(":").to_string();
    }

    macro_rules! speak {
        ($u:expr, $var:expr, $val:expr) => {
            if pass == 2 && (ctl.parseable_opt.pout.len() > 0 || extra_args.len() > 0) {
                let mut v = $var.to_string();
                v = v.replace("_Σ", "_sum");
                v = v.replace("_μ", "_mean");
                if ctl.parseable_opt.pcols.is_empty()
                    || bin_member(&ctl.parseable_opt.pcols_sortx, &v)
                    || bin_member(&extra_args, &v)
                {
                    out_data[$u].insert(v, $val);
                }
            }
        };
    }

    let val = if false {
        (String::new(), Vec::<String>::new(), String::new())
    } else if bin_member(alt_bcs, var) {
        let mut r = Vec::<String>::new();
        for l in 0..ex.clones.len() {
            let li = ex.clones[l][0].dataset_index;
            let bc = ex.clones[l][0].barcode.clone();
            let mut val = String::new();
            let alt = &ctl.origin_info.alt_bc_fields[li];
            for j in 0..alt.len() {
                if alt[j].0 == *var && alt[j].1.contains_key(&bc.clone()) {
                    val = alt[j].1[&bc.clone()].clone();
                }
            }
            r.push(val);
        }

        (String::new(), r, "cell".to_string())
    } else if bin_member(&ctl.gen_opt.info_fields, var) {
        let mut val = String::new();
        for q in 0..ctl.gen_opt.info_fields.len() {
            if *var == ctl.gen_opt.info_fields[q] {
                if ex.share.len() == 2 && ex.share[0].left != ex.share[1].left {
                    let mut tag = String::new();
                    for j in 0..ex.share.len() {
                        if ex.share[j].left {
                            tag += strme(&ex.share[j].seq);
                        }
                    }
                    tag += "_";
                    for j in 0..ex.share.len() {
                        if !ex.share[j].left {
                            tag += strme(&ex.share[j].seq);
                        }
                    }
                    if ctl.gen_opt.info_data.contains_key(&tag) {
                        val = ctl.gen_opt.info_data[&tag][q].clone();
                    }
                }
            }
        }

        (val, Vec::new(), "exact".to_string())
    } else if vname == "clonotype_ncells" {
        let mut n = 0;
        for u in exacts.iter() {
            n += exact_clonotypes[*u].ncells();
        }

        (format!("{}", n), Vec::new(), "clono".to_string())
    } else if vname == "clust" {
        let mut clust = Vec::<usize>::new();
        for j in 0..ex.clones.len() {
            let mut cid = 0;
            let bc = &ex.clones[j][0].barcode;
            let li = ex.clones[j][0].dataset_index;
            if gex_info.cluster[li].contains_key(&bc.clone()) {
                cid = gex_info.cluster[li][&bc.clone()];
            }
            clust.push(cid);
        }
        let mut clustf = Vec::<String>::new();
        for x in clust.iter() {
            clustf.push(format!("{}", x));
        }
        clust.sort_unstable();

        (abbrev_list(&clust), clustf, "cell-exect".to_string())
    } else if vname.starts_with(&"count_")
        && vname.after(&"count_").ends_with(&"")
        && !vname.between2(&"count_", &"").contains("_")
        && Regex::new(&vname.between2(&"count_", &"")).is_ok()
    {
        let reg = Regex::new(&vname.between2(&"count_", &"")).unwrap();
        let mut n = 0;
        for j in 0..ex.share.len() {
            let aa = aa_seq(&ex.share[j].seq, 0); // seems inefficient
            n += reg.find_iter(strme(&aa)).count();
        }

        (
            format!("{}", n),
            vec![format!("{}", n); ex.ncells()],
            "cell-exact".to_string(),
        )
    } else if vname.starts_with(&"count_")
        && vname.after(&"count_").ends_with(&"_cell")
        && !vname.between2(&"count_", &"_cell").contains("_")
        && Regex::new(&vname.between2(&"count_", &"_cell")).is_ok()
    {
        let reg = Regex::new(&vname.between2(&"count_", &"_cell")).unwrap();
        let mut n = 0;
        for j in 0..ex.share.len() {
            let aa = aa_seq(&ex.share[j].seq, 0); // seems inefficient
            n += reg.find_iter(strme(&aa)).count();
        }

        let _exact = format!("{}", n);
        (
            String::new(),
            vec![format!("{}", n); ex.ncells()],
            "cell-exact".to_string(),
        )
    } else if vname.starts_with(&"count_cdr_")
        && vname.after(&"count_cdr_").ends_with(&"")
        && !vname.between2(&"count_cdr_", &"").contains("_")
        && Regex::new(&vname.between2(&"count_cdr_", &"")).is_ok()
    {
        let reg = Regex::new(&vname.between2(&"count_cdr_", &"")).unwrap();
        let mut n = 0;
        for j in 0..ex.share.len() {
            if ex.share[j].cdr1_start.is_some() && ex.share[j].fr2_start.is_some() {
                let cdr1 = ex.share[j].cdr1_start.unwrap();
                let fwr2 = ex.share[j].fr2_start.unwrap();
                if cdr1 < fwr2 {
                    let aa = aa_seq(&ex.share[j].seq[cdr1..fwr2], 0);
                    n += reg.find_iter(strme(&aa)).count();
                }
            }
            if ex.share[j].cdr2_start.is_some() && ex.share[j].fr3_start.is_some() {
                let cdr2 = ex.share[j].cdr2_start.unwrap();
                let fwr3 = ex.share[j].fr3_start.unwrap();
                if cdr2 < fwr3 {
                    let aa = aa_seq(&ex.share[j].seq[cdr2..fwr3], 0);
                    n += reg.find_iter(strme(&aa)).count();
                }
            }
            let cdr3 = ex.share[j].cdr3_start;
            let fwr4 = cdr3 + 3 * ex.share[j].cdr3_aa.len();
            let aa = aa_seq(&ex.share[j].seq[cdr3..fwr4], 0);
            n += reg.find_iter(strme(&aa)).count();
        }

        (
            format!("{}", n),
            vec![format!("{}", n); ex.ncells()],
            "cell-exact".to_string(),
        )
    } else if vname.starts_with(&"count_cdr_")
        && vname.after(&"count_cdr_").ends_with(&"_cell")
        && !vname.between2(&"count_cdr_", &"_cell").contains("_")
        && Regex::new(&vname.between2(&"count_cdr_", &"_cell")).is_ok()
    {
        let reg = Regex::new(&vname.between2(&"count_cdr_", &"_cell")).unwrap();
        let mut n = 0;
        for j in 0..ex.share.len() {
            if ex.share[j].cdr1_start.is_some() && ex.share[j].fr2_start.is_some() {
                let cdr1 = ex.share[j].cdr1_start.unwrap();
                let fwr2 = ex.share[j].fr2_start.unwrap();
                if cdr1 < fwr2 {
                    let aa = aa_seq(&ex.share[j].seq[cdr1..fwr2], 0);
                    n += reg.find_iter(strme(&aa)).count();
                }
            }
            if ex.share[j].cdr2_start.is_some() && ex.share[j].fr3_start.is_some() {
                let cdr2 = ex.share[j].cdr2_start.unwrap();
                let fwr3 = ex.share[j].fr3_start.unwrap();
                if cdr2 < fwr3 {
                    let aa = aa_seq(&ex.share[j].seq[cdr2..fwr3], 0);
                    n += reg.find_iter(strme(&aa)).count();
                }
            }
            let cdr3 = ex.share[j].cdr3_start;
            let fwr4 = cdr3 + 3 * ex.share[j].cdr3_aa.len();
            let aa = aa_seq(&ex.share[j].seq[cdr3..fwr4], 0);
            n += reg.find_iter(strme(&aa)).count();
        }

        let _exact = format!("{}", n);
        (
            String::new(),
            vec![format!("{}", n); ex.ncells()],
            "cell-exact".to_string(),
        )
    } else if vname.starts_with("count_cdr")
        && vname.ends_with("")
        && vname.between2("count_cdr", "").contains("_")
        && vname.between("count_cdr", "_").parse::<i64>().is_ok()
        && vname.between("count_cdr", "_").force_i64() >= 1
        && vname.between("count_cdr", "_").force_i64() <= 3
        && !vname.after("count_cdr").between2(&"_", &"").contains("_")
        && Regex::new(&vname.between2(&"_", &"")).is_ok()
    {
        let arg1 = vname.between("count_cdr", "_").force_i64();
        let reg = Regex::new(&vname.after("count_cdr").between2(&"_", &"")).unwrap();
        let mut n = 0;
        if arg1 == 1 {
            for j in 0..ex.share.len() {
                if ex.share[j].cdr1_start.is_some() && ex.share[j].fr2_start.is_some() {
                    let cdr1 = ex.share[j].cdr1_start.unwrap();
                    let fwr2 = ex.share[j].fr2_start.unwrap();
                    if cdr1 < fwr2 {
                        let aa = aa_seq(&ex.share[j].seq[cdr1..fwr2], 0);
                        n += reg.find_iter(strme(&aa)).count();
                    }
                }
            }
        } else if arg1 == 2 {
            for j in 0..ex.share.len() {
                if ex.share[j].cdr2_start.is_some() && ex.share[j].fr3_start.is_some() {
                    let cdr2 = ex.share[j].cdr2_start.unwrap();
                    let fwr3 = ex.share[j].fr3_start.unwrap();
                    if cdr2 < fwr3 {
                        let aa = aa_seq(&ex.share[j].seq[cdr2..fwr3], 0);
                        n += reg.find_iter(strme(&aa)).count();
                    }
                }
            }
        } else {
            for j in 0..ex.share.len() {
                let cdr3 = ex.share[j].cdr3_start;
                let fwr4 = cdr3 + 3 * ex.share[j].cdr3_aa.len();
                let aa = aa_seq(&ex.share[j].seq[cdr3..fwr4], 0);
                n += reg.find_iter(strme(&aa)).count();
            }
        }

        (
            format!("{}", n),
            vec![format!("{}", n); ex.ncells()],
            "cell-exact".to_string(),
        )
    } else if vname.starts_with("count_cdr")
        && vname.ends_with("_cell")
        && vname.between2("count_cdr", "_cell").contains("_")
        && vname.between("count_cdr", "_").parse::<i64>().is_ok()
        && vname.between("count_cdr", "_").force_i64() >= 1
        && vname.between("count_cdr", "_").force_i64() <= 3
        && !vname
            .after("count_cdr")
            .between2(&"_", &"_cell")
            .contains("_")
        && Regex::new(&vname.between2(&"_", &"_cell")).is_ok()
    {
        let arg1 = vname.between("count_cdr", "_").force_i64();
        let reg = Regex::new(&vname.after("count_cdr").between2(&"_", &"_cell")).unwrap();
        let mut n = 0;
        if arg1 == 1 {
            for j in 0..ex.share.len() {
                if ex.share[j].cdr1_start.is_some() && ex.share[j].fr2_start.is_some() {
                    let cdr1 = ex.share[j].cdr1_start.unwrap();
                    let fwr2 = ex.share[j].fr2_start.unwrap();
                    if cdr1 < fwr2 {
                        let aa = aa_seq(&ex.share[j].seq[cdr1..fwr2], 0);
                        n += reg.find_iter(strme(&aa)).count();
                    }
                }
            }
        } else if arg1 == 2 {
            for j in 0..ex.share.len() {
                if ex.share[j].cdr2_start.is_some() && ex.share[j].fr3_start.is_some() {
                    let cdr2 = ex.share[j].cdr2_start.unwrap();
                    let fwr3 = ex.share[j].fr3_start.unwrap();
                    if cdr2 < fwr3 {
                        let aa = aa_seq(&ex.share[j].seq[cdr2..fwr3], 0);
                        n += reg.find_iter(strme(&aa)).count();
                    }
                }
            }
        } else {
            for j in 0..ex.share.len() {
                let cdr3 = ex.share[j].cdr3_start;
                let fwr4 = cdr3 + 3 * ex.share[j].cdr3_aa.len();
                let aa = aa_seq(&ex.share[j].seq[cdr3..fwr4], 0);
                n += reg.find_iter(strme(&aa)).count();
            }
        }

        let _exact = format!("{}", n);
        (
            String::new(),
            vec![format!("{}", n); ex.ncells()],
            "cell-exact".to_string(),
        )
    } else if vname.starts_with(&"count_fwr_")
        && vname.after(&"count_fwr_").ends_with(&"")
        && !vname.between2(&"count_fwr_", &"").contains("_")
        && Regex::new(&vname.between2(&"count_fwr_", &"")).is_ok()
    {
        let reg = Regex::new(&vname.between2(&"count_fwr_", &"")).unwrap();
        let mut n = 0;
        for j in 0..ex.share.len() {
            if ex.share[j].cdr1_start.is_some() {
                let fwr1 = ex.share[j].fr1_start;
                let cdr1 = ex.share[j].cdr1_start.unwrap();
                if fwr1 < cdr1 {
                    let aa = aa_seq(&ex.share[j].seq[fwr1..cdr1], 0);
                    n += reg.find_iter(strme(&aa)).count();
                }
            }
            if ex.share[j].fr2_start.is_some() && ex.share[j].cdr2_start.is_some() {
                let fwr2 = ex.share[j].fr2_start.unwrap();
                let cdr2 = ex.share[j].cdr2_start.unwrap();
                if fwr2 < cdr2 {
                    let aa = aa_seq(&ex.share[j].seq[fwr2..cdr2], 0);
                    n += reg.find_iter(strme(&aa)).count();
                }
            }
            if ex.share[j].fr3_start.is_some() {
                let fwr3 = ex.share[j].fr3_start.unwrap();
                let cdr3 = ex.share[j].cdr3_start;
                if fwr3 < cdr3 {
                    let aa = aa_seq(&ex.share[j].seq[fwr3..cdr3], 0);
                    n += reg.find_iter(strme(&aa)).count();
                }
            }
            let fwr4 = ex.share[j].cdr3_start + 3 * ex.share[j].cdr3_aa.len();
            let aa = aa_seq(&ex.share[j].seq[fwr4..], 0);
            n += reg.find_iter(strme(&aa)).count();
        }

        (
            format!("{}", n),
            vec![format!("{}", n); ex.ncells()],
            "cell-exact".to_string(),
        )
    } else if vname.starts_with(&"count_fwr_")
        && vname.after(&"count_fwr_").ends_with(&"_cell")
        && !vname.between2(&"count_fwr_", &"_cell").contains("_")
        && Regex::new(&vname.between2(&"count_fwr_", &"_cell")).is_ok()
    {
        let reg = Regex::new(&vname.between2(&"count_fwr_", &"_cell")).unwrap();
        let mut n = 0;
        for j in 0..ex.share.len() {
            if ex.share[j].cdr1_start.is_some() {
                let fwr1 = ex.share[j].fr1_start;
                let cdr1 = ex.share[j].cdr1_start.unwrap();
                if fwr1 < cdr1 {
                    let aa = aa_seq(&ex.share[j].seq[fwr1..cdr1], 0);
                    n += reg.find_iter(strme(&aa)).count();
                }
            }
            if ex.share[j].fr2_start.is_some() && ex.share[j].cdr2_start.is_some() {
                let fwr2 = ex.share[j].fr2_start.unwrap();
                let cdr2 = ex.share[j].cdr2_start.unwrap();
                if fwr2 < cdr2 {
                    let aa = aa_seq(&ex.share[j].seq[fwr2..cdr2], 0);
                    n += reg.find_iter(strme(&aa)).count();
                }
            }
            if ex.share[j].fr3_start.is_some() {
                let fwr3 = ex.share[j].fr3_start.unwrap();
                let cdr3 = ex.share[j].cdr3_start;
                if fwr3 < cdr3 {
                    let aa = aa_seq(&ex.share[j].seq[fwr3..cdr3], 0);
                    n += reg.find_iter(strme(&aa)).count();
                }
            }
            let fwr4 = ex.share[j].cdr3_start + 3 * ex.share[j].cdr3_aa.len();
            let aa = aa_seq(&ex.share[j].seq[fwr4..], 0);
            n += reg.find_iter(strme(&aa)).count();
        }

        let _exact = format!("{}", n);
        (
            String::new(),
            vec![format!("{}", n); ex.ncells()],
            "cell-exact".to_string(),
        )
    } else if vname.starts_with("count_fwr")
        && vname.ends_with("")
        && vname.between2("count_fwr", "").contains("_")
        && vname.between("count_fwr", "_").parse::<i64>().is_ok()
        && vname.between("count_fwr", "_").force_i64() >= 1
        && vname.between("count_fwr", "_").force_i64() <= 4
        && !vname.after("count_fwr").between2(&"_", &"").contains("_")
        && Regex::new(&vname.between2(&"_", &"")).is_ok()
    {
        let arg1 = vname.between("count_fwr", "_").force_i64();
        let reg = Regex::new(&vname.after("count_fwr").between2(&"_", &"")).unwrap();
        let mut n = 0;
        if arg1 == 1 {
            for j in 0..ex.share.len() {
                if ex.share[j].cdr1_start.is_some() {
                    let fwr1 = ex.share[j].fr1_start;
                    let cdr1 = ex.share[j].cdr1_start.unwrap();
                    if fwr1 < cdr1 {
                        let aa = aa_seq(&ex.share[j].seq[fwr1..cdr1], 0);
                        n += reg.find_iter(strme(&aa)).count();
                    }
                }
            }
        } else if arg1 == 2 {
            for j in 0..ex.share.len() {
                if ex.share[j].fr2_start.is_some() && ex.share[j].cdr2_start.is_some() {
                    let fwr2 = ex.share[j].fr2_start.unwrap();
                    let cdr2 = ex.share[j].cdr2_start.unwrap();
                    if fwr2 < cdr2 {
                        let aa = aa_seq(&ex.share[j].seq[fwr2..cdr2], 0);
                        n += reg.find_iter(strme(&aa)).count();
                    }
                }
            }
        } else if arg1 == 3 {
            for j in 0..ex.share.len() {
                if ex.share[j].fr3_start.is_some() {
                    let fwr3 = ex.share[j].fr3_start.unwrap();
                    let cdr3 = ex.share[j].cdr3_start;
                    if fwr3 < cdr3 {
                        let aa = aa_seq(&ex.share[j].seq[fwr3..cdr3], 0);
                        n += reg.find_iter(strme(&aa)).count();
                    }
                }
            }
        } else {
            for j in 0..ex.share.len() {
                let fwr4 = ex.share[j].cdr3_start + 3 * ex.share[j].cdr3_aa.len();
                let aa = aa_seq(&ex.share[j].seq[fwr4..], 0);
                n += reg.find_iter(strme(&aa)).count();
            }
        }

        (
            format!("{}", n),
            vec![format!("{}", n); ex.ncells()],
            "cell-exact".to_string(),
        )
    } else if vname.starts_with("count_fwr")
        && vname.ends_with("_cell")
        && vname.between2("count_fwr", "_cell").contains("_")
        && vname.between("count_fwr", "_").parse::<i64>().is_ok()
        && vname.between("count_fwr", "_").force_i64() >= 1
        && vname.between("count_fwr", "_").force_i64() <= 4
        && !vname
            .after("count_fwr")
            .between2(&"_", &"_cell")
            .contains("_")
        && Regex::new(&vname.between2(&"_", &"_cell")).is_ok()
    {
        let arg1 = vname.between("count_fwr", "_").force_i64();
        let reg = Regex::new(&vname.after("count_fwr").between2(&"_", &"_cell")).unwrap();
        let mut n = 0;
        if arg1 == 1 {
            for j in 0..ex.share.len() {
                if ex.share[j].cdr1_start.is_some() {
                    let fwr1 = ex.share[j].fr1_start;
                    let cdr1 = ex.share[j].cdr1_start.unwrap();
                    if fwr1 < cdr1 {
                        let aa = aa_seq(&ex.share[j].seq[fwr1..cdr1], 0);
                        n += reg.find_iter(strme(&aa)).count();
                    }
                }
            }
        } else if arg1 == 2 {
            for j in 0..ex.share.len() {
                if ex.share[j].fr2_start.is_some() && ex.share[j].cdr2_start.is_some() {
                    let fwr2 = ex.share[j].fr2_start.unwrap();
                    let cdr2 = ex.share[j].cdr2_start.unwrap();
                    if fwr2 < cdr2 {
                        let aa = aa_seq(&ex.share[j].seq[fwr2..cdr2], 0);
                        n += reg.find_iter(strme(&aa)).count();
                    }
                }
            }
        } else if arg1 == 3 {
            for j in 0..ex.share.len() {
                if ex.share[j].fr3_start.is_some() {
                    let fwr3 = ex.share[j].fr3_start.unwrap();
                    let cdr3 = ex.share[j].cdr3_start;
                    if fwr3 < cdr3 {
                        let aa = aa_seq(&ex.share[j].seq[fwr3..cdr3], 0);
                        n += reg.find_iter(strme(&aa)).count();
                    }
                }
            }
        } else {
            for j in 0..ex.share.len() {
                let fwr4 = ex.share[j].cdr3_start + 3 * ex.share[j].cdr3_aa.len();
                let aa = aa_seq(&ex.share[j].seq[fwr4..], 0);
                n += reg.find_iter(strme(&aa)).count();
            }
        }

        let _exact = format!("{}", n);
        (
            String::new(),
            vec![format!("{}", n); ex.ncells()],
            "cell-exact".to_string(),
        )
    } else if vname == "cred" {
        let mut credsx = Vec::<f64>::new();
        for l in 0..ex.clones.len() {
            let bc = &ex.clones[l][0].barcode;
            let li = ex.clones[l][0].dataset_index;
            if gex_info.pca[li].contains_key(&bc.clone()) {
                let mut creds = 0;
                let mut z = Vec::<(f64, String)>::new();
                let x = &gex_info.pca[li][&bc.clone()];
                for y in gex_info.pca[li].iter() {
                    let mut dist2 = 0.0;
                    for m in 0..x.len() {
                        dist2 += (y.1[m] - x[m]) * (y.1[m] - x[m]);
                    }
                    z.push((dist2, y.0.clone()));
                }
                z.sort_by(|a, b| a.partial_cmp(b).unwrap());
                let top = n_vdj_gex[li];
                for i in 0..top {
                    if bin_member(&vdj_cells[li], &z[i].1) {
                        creds += 1;
                    }
                }
                let pc = 100.0 * creds as f64 / top as f64;
                credsx.push(pc);
            } else {
                credsx.push(0.0);
            }
        }
        let credsx_unsorted = credsx.clone();
        credsx.sort_by(|a, b| a.partial_cmp(b).unwrap());
        let mut r = Vec::<String>::new();
        for j in 0..credsx_unsorted.len() {
            r.push(format!("{:.1}", credsx_unsorted[j]));
        }

        (
            format!("{:.1}", median_f64(&credsx)),
            r,
            "cell-exact".to_string(),
        )
    } else if vname == "cred_cell" {
        let mut credsx = Vec::<f64>::new();
        for l in 0..ex.clones.len() {
            let bc = &ex.clones[l][0].barcode;
            let li = ex.clones[l][0].dataset_index;
            if gex_info.pca[li].contains_key(&bc.clone()) {
                let mut creds = 0;
                let mut z = Vec::<(f64, String)>::new();
                let x = &gex_info.pca[li][&bc.clone()];
                for y in gex_info.pca[li].iter() {
                    let mut dist2 = 0.0;
                    for m in 0..x.len() {
                        dist2 += (y.1[m] - x[m]) * (y.1[m] - x[m]);
                    }
                    z.push((dist2, y.0.clone()));
                }
                z.sort_by(|a, b| a.partial_cmp(b).unwrap());
                let top = n_vdj_gex[li];
                for i in 0..top {
                    if bin_member(&vdj_cells[li], &z[i].1) {
                        creds += 1;
                    }
                }
                let pc = 100.0 * creds as f64 / top as f64;
                credsx.push(pc);
            } else {
                credsx.push(0.0);
            }
        }
        let credsx_unsorted = credsx.clone();
        credsx.sort_by(|a, b| a.partial_cmp(b).unwrap());
        let mut r = Vec::<String>::new();
        for j in 0..credsx_unsorted.len() {
            r.push(format!("{:.1}", credsx_unsorted[j]));
        }

        let _exact = format!("{:.1}", median_f64(&credsx));
        (String::new(), r, "cell-exact".to_string())
    } else if vname == "datasets" {
        let mut datasets = Vec::<String>::new();
        for j in 0..ex.clones.len() {
            datasets.push(ctl.origin_info.dataset_id[ex.clones[j][0].dataset_index].clone());
        }
        let mut datasets_unique = datasets.clone();
        unique_sort(&mut datasets_unique);

        (
            format!("{}", datasets_unique.iter().format(",")),
            datasets,
            "cell-exact".to_string(),
        )
    } else if vname == "datasets_cell" {
        let mut datasets = Vec::<String>::new();
        for j in 0..ex.clones.len() {
            datasets.push(ctl.origin_info.dataset_id[ex.clones[j][0].dataset_index].clone());
        }
        let mut datasets_unique = datasets.clone();
        unique_sort(&mut datasets_unique);

        let _exact = format!("{}", datasets_unique.iter().format(","));
        (String::new(), datasets, "cell-exact".to_string())
    } else if vname == "donors" {
        let mut donors = Vec::<String>::new();
        for j in 0..ex.clones.len() {
            if ex.clones[j][0].donor_index.is_some() {
                donors
                    .push(ctl.origin_info.donor_list[ex.clones[j][0].donor_index.unwrap()].clone());
            } else {
                donors.push("?".to_string());
            }
        }
        let donors_unsorted = donors.clone();
        unique_sort(&mut donors);

        (
            format!("{}", donors.iter().format(",")),
            donors_unsorted,
            "cell-exact".to_string(),
        )
    } else if vname == "donors_cell" {
        let mut donors = Vec::<String>::new();
        for j in 0..ex.clones.len() {
            if ex.clones[j][0].donor_index.is_some() {
                donors
                    .push(ctl.origin_info.donor_list[ex.clones[j][0].donor_index.unwrap()].clone());
            } else {
                donors.push("?".to_string());
            }
        }
        let donors_unsorted = donors.clone();
        unique_sort(&mut donors);

        let _exact = format!("{}", donors.iter().format(","));
        (String::new(), donors_unsorted, "cell-exact".to_string())
    } else if vname == "dref" {
        let mut diffs = 0;
        for m in 0..cols {
            if mat[m][u].is_some() {
                let r = mat[m][u].unwrap();
                let seq = &ex.share[r].seq_del_amino;
                let mut vref = refdata.refs[rsi.vids[m]].to_ascii_vec();
                if rsi.vpids[m].is_some() {
                    vref = dref[rsi.vpids[m].unwrap()].nt_sequence.clone();
                }
                let jref = refdata.refs[rsi.jids[m]].to_ascii_vec();
                let z = seq.len();
                for p in 0..z {
                    let b = seq[p];
                    if p < vref.len() - ctl.heur.ref_v_trim && b != vref[p] {
                        diffs += 1;
                    }
                    if p >= z - (jref.len() - ctl.heur.ref_j_trim)
                        && b != jref[jref.len() - (z - p)]
                    {
                        diffs += 1;
                    }
                }
            }
        }

        (format!("{}", diffs), Vec::new(), "exact".to_string())
    } else if vname == "dref_aa" {
        let mut diffs = 0;
        for m in 0..cols {
            if mat[m][u].is_some() {
                let r = mat[m][u].unwrap();
                let aa_seq = &ex.share[r].aa_mod_indel;
                let mut vref = refdata.refs[rsi.vids[m]].to_ascii_vec();
                if rsi.vpids[m].is_some() {
                    vref = dref[rsi.vpids[m].unwrap()].nt_sequence.clone();
                }
                let jref = refdata.refs[rsi.jids[m]].to_ascii_vec();
                let z = 3 * aa_seq.len() + 1;
                for p in 0..aa_seq.len() {
                    if aa_seq[p] == b'-' {
                        diffs += 1;
                        continue;
                    }
                    if 3 * p + 3 <= vref.len() - ctl.heur.ref_v_trim
                        && aa_seq[p] != codon_to_aa(&vref[3 * p..3 * p + 3])
                    {
                        diffs += 1;
                    }
                    if 3 * p > z - (jref.len() - ctl.heur.ref_j_trim) + 3
                        && aa_seq[p]
                            != codon_to_aa(
                                &jref[jref.len() - (z - 3 * p)..jref.len() - (z - 3 * p) + 3],
                            )
                    {
                        diffs += 1;
                    }
                }
            }
        }

        (format!("{}", diffs), Vec::new(), "exact".to_string())
    } else if vname == "entropy" {
        let mut total_counts = Vec::<usize>::new();
        for l in 0..ex.clones.len() {
            let li = ex.clones[l][0].dataset_index;
            let bc = ex.clones[l][0].barcode.clone();
            if !gex_info.gex_barcodes.is_empty() {
                let p = bin_position(&gex_info.gex_barcodes[li], &bc);
                if p >= 0 {
                    let mut raw_count = 0;
                    if gex_info.gex_matrices[li].initialized() {
                        let row = gex_info.gex_matrices[li].row(p as usize);
                        for j in 0..row.len() {
                            let f = row[j].0;
                            let n = row[j].1;
                            if gex_info.is_gex[li][f] {
                                raw_count += n;
                            }
                        }
                    } else {
                        let z1 = gex_info.h5_indptr[li][p as usize] as usize;
                        let z2 = gex_info.h5_indptr[li][p as usize + 1] as usize; // is p+1 OK??
                        let d: Vec<u32>;
                        let ind: Vec<u32>;
                        if ctl.gen_opt.h5_pre {
                            d = h5_data[li].1[z1..z2].to_vec();
                            ind = h5_data[li].2[z1..z2].to_vec();
                        } else {
                            d = d_readers[li]
                                .as_ref()
                                .unwrap()
                                .read_slice(s![z1..z2])
                                .unwrap()
                                .to_vec();
                            ind = ind_readers[li]
                                .as_ref()
                                .unwrap()
                                .read_slice(s![z1..z2])
                                .unwrap()
                                .to_vec();
                        }
                        for j in 0..d.len() {
                            if gex_info.is_gex[li][ind[j] as usize] {
                                raw_count += d[j] as usize;
                            }
                        }
                    }
                    total_counts.push(raw_count);
                }
            }
        }
        let mut entropies = Vec::<f64>::new();
        for l in 0..ex.clones.len() {
            let li = ex.clones[l][0].dataset_index;
            let bc = ex.clones[l][0].barcode.clone();
            if !gex_info.gex_barcodes.is_empty() {
                let mut entropy = 0.0;
                let p = bin_position(&gex_info.gex_barcodes[li], &bc);
                if p >= 0 {
                    if gex_info.gex_matrices[li].initialized() {
                        let row = gex_info.gex_matrices[li].row(p as usize);
                        for j in 0..row.len() {
                            let f = row[j].0;
                            let n = row[j].1;
                            if gex_info.is_gex[li][f] {
                                let q = n as f64 / total_counts[l] as f64;
                                entropy -= q * q.log2();
                            }
                        }
                    } else {
                        let z1 = gex_info.h5_indptr[li][p as usize] as usize;
                        let z2 = gex_info.h5_indptr[li][p as usize + 1] as usize; // is p+1 OK??
                        let d: Vec<u32>;
                        let ind: Vec<u32>;
                        if ctl.gen_opt.h5_pre {
                            d = h5_data[li].1[z1..z2].to_vec();
                            ind = h5_data[li].2[z1..z2].to_vec();
                        } else {
                            d = d_readers[li]
                                .as_ref()
                                .unwrap()
                                .read_slice(s![z1..z2])
                                .unwrap()
                                .to_vec();
                            ind = ind_readers[li]
                                .as_ref()
                                .unwrap()
                                .read_slice(s![z1..z2])
                                .unwrap()
                                .to_vec();
                        }
                        for j in 0..d.len() {
                            if gex_info.is_gex[li][ind[j] as usize] {
                                let n = d[j] as usize;
                                let q = n as f64 / total_counts[l] as f64;
                                entropy -= q * q.log2();
                            }
                        }
                    }
                }
                entropies.push(entropy);
            }
        }
        let entropies_unsorted = entropies.clone();
        entropies.sort_by(|a, b| a.partial_cmp(b).unwrap());
        let mut entropy = 0.0;
        if !entropies.is_empty() {
            entropy = median_f64(&entropies);
        }
        let mut e = Vec::<String>::new();
        for x in entropies_unsorted.iter() {
            e.push(format!("{:.2}", x));
        }

        (format!("{:.2}", entropy), e, "cell-exact".to_string())
    } else if vname == "entropy_cell" {
        let mut total_counts = Vec::<usize>::new();
        for l in 0..ex.clones.len() {
            let li = ex.clones[l][0].dataset_index;
            let bc = ex.clones[l][0].barcode.clone();
            if !gex_info.gex_barcodes.is_empty() {
                let p = bin_position(&gex_info.gex_barcodes[li], &bc);
                if p >= 0 {
                    let mut raw_count = 0;
                    if gex_info.gex_matrices[li].initialized() {
                        let row = gex_info.gex_matrices[li].row(p as usize);
                        for j in 0..row.len() {
                            let f = row[j].0;
                            let n = row[j].1;
                            if gex_info.is_gex[li][f] {
                                raw_count += n;
                            }
                        }
                    } else {
                        let z1 = gex_info.h5_indptr[li][p as usize] as usize;
                        let z2 = gex_info.h5_indptr[li][p as usize + 1] as usize; // is p+1 OK??
                        let d: Vec<u32>;
                        let ind: Vec<u32>;
                        if ctl.gen_opt.h5_pre {
                            d = h5_data[li].1[z1..z2].to_vec();
                            ind = h5_data[li].2[z1..z2].to_vec();
                        } else {
                            d = d_readers[li]
                                .as_ref()
                                .unwrap()
                                .read_slice(s![z1..z2])
                                .unwrap()
                                .to_vec();
                            ind = ind_readers[li]
                                .as_ref()
                                .unwrap()
                                .read_slice(s![z1..z2])
                                .unwrap()
                                .to_vec();
                        }
                        for j in 0..d.len() {
                            if gex_info.is_gex[li][ind[j] as usize] {
                                raw_count += d[j] as usize;
                            }
                        }
                    }
                    total_counts.push(raw_count);
                }
            }
        }
        let mut entropies = Vec::<f64>::new();
        for l in 0..ex.clones.len() {
            let li = ex.clones[l][0].dataset_index;
            let bc = ex.clones[l][0].barcode.clone();
            if !gex_info.gex_barcodes.is_empty() {
                let mut entropy = 0.0;
                let p = bin_position(&gex_info.gex_barcodes[li], &bc);
                if p >= 0 {
                    if gex_info.gex_matrices[li].initialized() {
                        let row = gex_info.gex_matrices[li].row(p as usize);
                        for j in 0..row.len() {
                            let f = row[j].0;
                            let n = row[j].1;
                            if gex_info.is_gex[li][f] {
                                let q = n as f64 / total_counts[l] as f64;
                                entropy -= q * q.log2();
                            }
                        }
                    } else {
                        let z1 = gex_info.h5_indptr[li][p as usize] as usize;
                        let z2 = gex_info.h5_indptr[li][p as usize + 1] as usize; // is p+1 OK??
                        let d: Vec<u32>;
                        let ind: Vec<u32>;
                        if ctl.gen_opt.h5_pre {
                            d = h5_data[li].1[z1..z2].to_vec();
                            ind = h5_data[li].2[z1..z2].to_vec();
                        } else {
                            d = d_readers[li]
                                .as_ref()
                                .unwrap()
                                .read_slice(s![z1..z2])
                                .unwrap()
                                .to_vec();
                            ind = ind_readers[li]
                                .as_ref()
                                .unwrap()
                                .read_slice(s![z1..z2])
                                .unwrap()
                                .to_vec();
                        }
                        for j in 0..d.len() {
                            if gex_info.is_gex[li][ind[j] as usize] {
                                let n = d[j] as usize;
                                let q = n as f64 / total_counts[l] as f64;
                                entropy -= q * q.log2();
                            }
                        }
                    }
                }
                entropies.push(entropy);
            }
        }
        let entropies_unsorted = entropies.clone();
        entropies.sort_by(|a, b| a.partial_cmp(b).unwrap());
        let mut entropy = 0.0;
        if !entropies.is_empty() {
            entropy = median_f64(&entropies);
        }
        let mut e = Vec::<String>::new();
        for x in entropies_unsorted.iter() {
            e.push(format!("{:.2}", x));
        }

        let _exact = format!("{:.2}", entropy);
        (String::new(), e, "cell-exact".to_string())
    } else if vname == "far" {
        let mut dist = -1_isize;
        for i2 in 0..varmat.len() {
            if i2 == u || fp[i2] != fp[u] {
                continue;
            }
            let mut d = 0_isize;
            for c in fp[u].iter() {
                for j in 0..varmat[u][*c].len() {
                    if varmat[u][*c][j] != varmat[i2][*c][j] {
                        d += 1;
                    }
                }
            }
            dist = max(dist, d);
        }
        let d;
        if dist == -1_isize {
            d = "".to_string();
        } else {
            d = format!("{}", dist);
        }

        (d, Vec::new(), "exact".to_string())
    } else if vname.starts_with("fb")
        && vname.ends_with("")
        && vname.between2("fb", "").parse::<i64>().is_ok()
        && vname.between2("fb", "").force_i64() >= 1
    {
        let arg1 = vname.between2("fb", "").force_i64();
        let ncols = gex_info.fb_top_matrices[0].ncols();
        let n = (arg1 - 1) as usize;
        let fb = if n < ncols {
            gex_info.fb_top_matrices[0].col_label(n)
        } else {
            String::new()
        };

        ((*fb).to_string(), Vec::new(), "exact".to_string())
    } else if vname.starts_with("fb")
        && vname.ends_with("_n")
        && vname.between2("fb", "_n").parse::<i64>().is_ok()
        && vname.between2("fb", "_n").force_i64() >= 1
    {
        let arg1 = vname.between2("fb", "_n").force_i64();
        let ncols = gex_info.fb_top_matrices[0].ncols();
        let n = (arg1 - 1) as usize;
        let median;
        let mut counts;
        if n >= ncols {
            median = 0;
            counts = vec!["0".to_string(); ex.ncells()];
        } else {
            counts = Vec::<String>::new();
            let mut counts_sorted = Vec::<usize>::new();
            for l in 0..ex.clones.len() {
                let bc = ex.clones[l][0].barcode.clone();
                let p = bin_position(&gex_info.fb_top_barcodes[0], &bc);
                if p < 0 {
                    counts.push("0".to_string());
                    counts_sorted.push(0);
                } else {
                    let x = gex_info.fb_top_matrices[0].value(p as usize, n);
                    counts.push(format!("{}", x));
                    counts_sorted.push(x);
                }
            }
            counts_sorted.sort_unstable();
            median = rounded_median(&counts_sorted);
        }

        (format!("{}", median), counts, "cell-exact".to_string())
    } else if vname.starts_with("fb")
        && vname.ends_with("_n_cell")
        && vname.between2("fb", "_n_cell").parse::<i64>().is_ok()
        && vname.between2("fb", "_n_cell").force_i64() >= 1
    {
        let arg1 = vname.between2("fb", "_n_cell").force_i64();
        let ncols = gex_info.fb_top_matrices[0].ncols();
        let n = (arg1 - 1) as usize;
        let median;
        let mut counts;
        if n >= ncols {
            median = 0;
            counts = vec!["0".to_string(); ex.ncells()];
        } else {
            counts = Vec::<String>::new();
            let mut counts_sorted = Vec::<usize>::new();
            for l in 0..ex.clones.len() {
                let bc = ex.clones[l][0].barcode.clone();
                let p = bin_position(&gex_info.fb_top_barcodes[0], &bc);
                if p < 0 {
                    counts.push("0".to_string());
                    counts_sorted.push(0);
                } else {
                    let x = gex_info.fb_top_matrices[0].value(p as usize, n);
                    counts.push(format!("{}", x));
                    counts_sorted.push(x);
                }
            }
            counts_sorted.sort_unstable();
            median = rounded_median(&counts_sorted);
        }

        let _exact = format!("{}", median);
        (String::new(), counts, "cell-exact".to_string())
    } else if vname == "filter" {
        let mut fates = Vec::<String>::new();
        for j in 0..ex.clones.len() {
            let mut f = String::new();
            let bc = &ex.clones[j][0].barcode;
            let li = ex.clones[j][0].dataset_index;
            if fate[li].contains_key(&bc.clone()) {
                f = fate[li][&bc.clone()].clone();
                f = f.between(" ", " ").to_string();
            }
            fates.push(f);
        }

        (String::new(), fates, "cell".to_string())
    } else if vname == "gex" {
        let mut f = Vec::<String>::new();
        for x in gex_fcounts_unsorted.iter() {
            f.push(format!("{}", *x));
        }
        let mut counts = gex_counts_unsorted.clone();
        counts.sort_unstable();
        let gex_median = rounded_median(&counts);

        (format!("{}", gex_median), f, "cell-exact".to_string())
    } else if vname == "gex_cell" {
        let mut f = Vec::<String>::new();
        for x in gex_fcounts_unsorted.iter() {
            f.push(format!("{}", *x));
        }
        let mut counts = gex_counts_unsorted.clone();
        counts.sort_unstable();
        let gex_median = rounded_median(&counts);

        let _exact = format!("{}", gex_median);
        (String::new(), f, "cell-exact".to_string())
    } else if vname == "gex_max" {
        (
            format!("{}", gex_counts_unsorted.iter().max().unwrap()),
            Vec::new(),
            "exact".to_string(),
        )
    } else if vname == "gex_mean" {
        let gex_sum = gex_fcounts_unsorted.iter().sum::<f64>();
        let gex_mean = gex_sum / gex_fcounts_unsorted.len() as f64;

        (
            format!("{}", gex_mean.round() as usize),
            Vec::new(),
            "exact".to_string(),
        )
    } else if vname == "gex_min" {
        (
            format!("{}", gex_counts_unsorted.iter().min().unwrap()),
            Vec::new(),
            "exact".to_string(),
        )
    } else if vname == "gex_sum" {
        let gex_sum = gex_fcounts_unsorted.iter().sum::<f64>();

        (
            format!("{}", gex_sum.round() as usize),
            Vec::new(),
            "exact".to_string(),
        )
    } else if vname == "gex_Σ" {
        let gex_sum = gex_fcounts_unsorted.iter().sum::<f64>();

        (
            format!("{}", gex_sum.round() as usize),
            Vec::new(),
            "exact".to_string(),
        )
    } else if vname == "gex_μ" {
        let gex_sum = gex_fcounts_unsorted.iter().sum::<f64>();
        let gex_mean = gex_sum / gex_fcounts_unsorted.len() as f64;

        (
            format!("{}", gex_mean.round() as usize),
            Vec::new(),
            "exact".to_string(),
        )
    } else if vname.starts_with("g")
        && vname.ends_with("")
        && vname.between2("g", "").parse::<i64>().is_ok()
        && vname.between2("g", "").force_i64() >= 0
    {
        let arg1 = vname.between2("g", "").force_i64();
        let d = arg1 as usize;
        let answer = if groups.contains_key(&d) {
            format!("{}", groups[&d][u] + 1)
        } else {
            String::new()
        };

        (answer, Vec::new(), "exact".to_string())
    } else if vname == "inkt" {
        let mut s = String::new();
        let alpha_g = ex.share[0].inkt_alpha_chain_gene_match;
        let alpha_j = ex.share[0].inkt_alpha_chain_junction_match;
        let beta_g = ex.share[0].inkt_beta_chain_gene_match;
        let beta_j = ex.share[0].inkt_beta_chain_junction_match;
        if alpha_g || alpha_j {
            s += "𝝰";
            if alpha_g {
                s += "g";
            }
            if alpha_j {
                s += "j";
            }
        }
        if beta_g || beta_j {
            s += "𝝱";
            if beta_g {
                s += "g";
            }
            if beta_j {
                s += "j";
            }
        }

        (s, Vec::new(), "exact".to_string())
    } else if vname == "mait" {
        let mut s = String::new();
        let alpha_g = ex.share[0].mait_alpha_chain_gene_match;
        let alpha_j = ex.share[0].mait_alpha_chain_junction_match;
        let beta_g = ex.share[0].mait_beta_chain_gene_match;
        let beta_j = ex.share[0].mait_beta_chain_junction_match;
        if alpha_g || alpha_j {
            s += "𝝰";
            if alpha_g {
                s += "g";
            }
            if alpha_j {
                s += "j";
            }
        }
        if beta_g || beta_j {
            s += "𝝱";
            if beta_g {
                s += "g";
            }
            if beta_j {
                s += "j";
            }
        }

        (s, Vec::new(), "exact".to_string())
    } else if vname == "mark" {
        let mut n = 0;
        for j in 0..ex.clones.len() {
            if ex.clones[j][0].marked {
                n += 1;
            }
        }

        (format!("{}", n), Vec::new(), "exact".to_string())
    } else if vname == "mem" {
        let mut n = 0;
        let mut y = Vec::<String>::new();
        if ctl.gen_opt.using_secmem {
            for l in 0..ex.clones.len() {
                let li = ex.clones[l][0].dataset_index;
                let bc = &ex.clones[l][0].barcode;
                let mut count = 0;
                if ctl.origin_info.secmem[li].contains_key(&bc.clone()) {
                    count = ctl.origin_info.secmem[li][&bc.clone()].1;
                    n += count;
                }
                y.push(format!("{}", count));
            }
        }

        (format!("{}", n), y, "cell-exact".to_string())
    } else if vname == "mem_cell" {
        let mut n = 0;
        let mut y = Vec::<String>::new();
        if ctl.gen_opt.using_secmem {
            for l in 0..ex.clones.len() {
                let li = ex.clones[l][0].dataset_index;
                let bc = &ex.clones[l][0].barcode;
                let mut count = 0;
                if ctl.origin_info.secmem[li].contains_key(&bc.clone()) {
                    count = ctl.origin_info.secmem[li][&bc.clone()].1;
                    n += count;
                }
                y.push(format!("{}", count));
            }
        }

        let _exact = format!("{}", n);
        (String::new(), y, "cell-exact".to_string())
    } else if vname == "n" {
        let counts = vec!["1.0".to_string(); mults[u]];

        (format!("{}", mults[u]), counts, "cell-exact".to_string())
    } else if vname == "n_cell" {
        let counts = vec!["1.0".to_string(); mults[u]];

        let _exact = format!("{}", mults[u]);
        (String::new(), counts, "cell-exact".to_string())
    } else if vname.starts_with(&"n_")
        && vname.after(&"n_").ends_with(&"")
        && (bin_member(
            &ctl.origin_info.dataset_list,
            &vname.between2("n_", "").to_string(),
        ) || bin_member(
            &ctl.origin_info.origin_list,
            &vname.between2("n_", "").to_string(),
        ) || bin_member(
            &ctl.origin_info.donor_list,
            &vname.between2("n_", "").to_string(),
        ) || bin_member(
            &ctl.origin_info.tag_list,
            &vname.between2("n_", "").to_string(),
        ))
    {
        let name = vname.between2("n_", "");
        let mut count = 0;
        let mut counts = Vec::<String>::new();
        for j in 0..ex.clones.len() {
            let x = &ex.clones[j][0];
            if ctl.origin_info.dataset_id[x.dataset_index] == name {
                count += 1;
                counts.push("1.0".to_string());
            } else if x.origin_index.is_some()
                && ctl.origin_info.origin_list[x.origin_index.unwrap()] == name
            {
                count += 1;
                counts.push("1.0".to_string());
            } else if x.donor_index.is_some()
                && ctl.origin_info.donor_list[x.donor_index.unwrap()] == name
            {
                count += 1;
                counts.push("1.0".to_string());
            } else if x.tag_index.is_some()
                && ctl.origin_info.tag_list[x.tag_index.unwrap()] == name
            {
                count += 1;
                counts.push("1.0".to_string());
            }
        }

        (format!("{}", count), counts, "cell-exact".to_string())
    } else if vname.starts_with(&"n_")
        && vname.after(&"n_").ends_with(&"_cell")
        && (bin_member(
            &ctl.origin_info.dataset_list,
            &vname.between2("n_", "_cell").to_string(),
        ) || bin_member(
            &ctl.origin_info.origin_list,
            &vname.between2("n_", "_cell").to_string(),
        ) || bin_member(
            &ctl.origin_info.donor_list,
            &vname.between2("n_", "_cell").to_string(),
        ) || bin_member(
            &ctl.origin_info.tag_list,
            &vname.between2("n_", "_cell").to_string(),
        ))
    {
        let name = vname.between2("n_", "_cell");
        let mut count = 0;
        let mut counts = Vec::<String>::new();
        for j in 0..ex.clones.len() {
            let x = &ex.clones[j][0];
            if ctl.origin_info.dataset_id[x.dataset_index] == name {
                count += 1;
                counts.push("1.0".to_string());
            } else if x.origin_index.is_some()
                && ctl.origin_info.origin_list[x.origin_index.unwrap()] == name
            {
                count += 1;
                counts.push("1.0".to_string());
            } else if x.donor_index.is_some()
                && ctl.origin_info.donor_list[x.donor_index.unwrap()] == name
            {
                count += 1;
                counts.push("1.0".to_string());
            } else if x.tag_index.is_some()
                && ctl.origin_info.tag_list[x.tag_index.unwrap()] == name
            {
                count += 1;
                counts.push("1.0".to_string());
            }
        }

        let _exact = format!("{}", count);
        (String::new(), counts, "cell-exact".to_string())
    } else if vname == "n_b" {
        let mut n_b = 0;
        let mut ns = Vec::<String>::new();
        for j in 0..ex.clones.len() {
            let bc = &ex.clones[j][0].barcode;
            let li = ex.clones[j][0].dataset_index;
            if gex_info.cell_type[li].contains_key(&bc.clone()) {
                if gex_info.cell_type[li][&bc.clone()].starts_with('B') {
                    n_b += 1;
                    ns.push("1.0".to_string());
                } else {
                    ns.push("0.0".to_string());
                }
            }
        }

        (format!("{}", n_b), ns, "cell-exact".to_string())
    } else if vname == "n_b_cell" {
        let mut n_b = 0;
        let mut ns = Vec::<String>::new();
        for j in 0..ex.clones.len() {
            let bc = &ex.clones[j][0].barcode;
            let li = ex.clones[j][0].dataset_index;
            if gex_info.cell_type[li].contains_key(&bc.clone()) {
                if gex_info.cell_type[li][&bc.clone()].starts_with('B') {
                    n_b += 1;
                    ns.push("1.0".to_string());
                } else {
                    ns.push("0.0".to_string());
                }
            }
        }

        let _exact = format!("{}", n_b);
        (String::new(), ns, "cell-exact".to_string())
    } else if vname == "n_gex" {
        let mut n = Vec::<String>::new();
        let mut n_gex = 0;
        for x in n_gexs.iter() {
            n.push(format!("{}", *x));
            n_gex += *x;
        }

        (format!("{}", n_gex), n, "cell-exact".to_string())
    } else if vname == "n_gex_cell" {
        let mut n = Vec::<String>::new();
        let mut n_gex = 0;
        for x in n_gexs.iter() {
            n.push(format!("{}", *x));
            n_gex += *x;
        }

        let _exact = format!("{}", n_gex);
        (String::new(), n, "cell-exact".to_string())
    } else if vname == "n_other" {
        let mut n = 0;
        let mut ns = Vec::<String>::new();
        for j in 0..ex.clones.len() {
            let mut found = false;
            let di = ex.clones[j][0].dataset_index;
            let f = format!("n_{}", ctl.origin_info.dataset_id[di]);
            for i in 0..nd_fields.len() {
                if f == nd_fields[i] {
                    found = true;
                }
            }
            if !found {
                n += 1;
                ns.push("1.0".to_string());
            } else {
                ns.push("0.0".to_string());
            }
        }

        (format!("{}", n), ns, "cell-exact".to_string())
    } else if vname == "n_other_cell" {
        let mut n = 0;
        let mut ns = Vec::<String>::new();
        for j in 0..ex.clones.len() {
            let mut found = false;
            let di = ex.clones[j][0].dataset_index;
            let f = format!("n_{}", ctl.origin_info.dataset_id[di]);
            for i in 0..nd_fields.len() {
                if f == nd_fields[i] {
                    found = true;
                }
            }
            if !found {
                n += 1;
                ns.push("1.0".to_string());
            } else {
                ns.push("0.0".to_string());
            }
        }

        let _exact = format!("{}", n);
        (String::new(), ns, "cell-exact".to_string())
    } else if vname == "nbc" {
        let mut nbc = Vec::<String>::new();
        for j in 0..ex.clones.len() {
            let bc = ex.clones[j][0].barcode.before("-").as_bytes();
            let mut n = 0 as u64;
            for k in 0..bc.len() {
                if k > 0 {
                    n *= 4;
                }
                if bc[k] == b'C' {
                    n += 1;
                } else if bc[k] == b'G' {
                    n += 2;
                } else if bc[k] == b'T' {
                    n += 3;
                }
            }
            nbc.push(format!("{:010}", n));
        }

        (String::new(), nbc, "cell".to_string())
    } else if vname == "nchains" {
        (
            format!("{}", rsi.mat.len()),
            Vec::new(),
            "clono".to_string(),
        )
    } else if vname == "nchains_present" {
        (
            format!("{}", exact_clonotypes[exacts[u]].share.len()),
            Vec::new(),
            "exact".to_string(),
        )
    } else if vname == "near" {
        let near;
        let mut dist = 1_000_000;
        for i2 in 0..varmat.len() {
            if i2 == u || fp[i2] != fp[u] {
                continue;
            }
            let mut d = 0;
            for c in fp[u].iter() {
                for j in 0..varmat[u][*c].len() {
                    if varmat[u][*c][j] != varmat[i2][*c][j] {
                        d += 1;
                    }
                }
            }
            dist = min(dist, d);
        }
        if dist == 1_000_000 {
            near = "".to_string()
        } else {
            near = format!("{}", dist)
        }

        (near, Vec::new(), "exact".to_string())
    } else if vname == "npe" {
        (String::new(), Vec::new(), "cell".to_string())
    } else if vname == "origins" {
        let mut origins = Vec::<String>::new();
        for j in 0..ex.clones.len() {
            if ex.clones[j][0].origin_index.is_some() {
                origins.push(
                    ctl.origin_info.origin_list[ex.clones[j][0].origin_index.unwrap()].clone(),
                );
            } else {
                origins.push("?".to_string());
            }
        }
        let origins_unsorted = origins.clone();
        unique_sort(&mut origins);

        (
            format!("{}", origins.iter().format(",")),
            origins_unsorted,
            "cell-exact".to_string(),
        )
    } else if vname == "origins_cell" {
        let mut origins = Vec::<String>::new();
        for j in 0..ex.clones.len() {
            if ex.clones[j][0].origin_index.is_some() {
                origins.push(
                    ctl.origin_info.origin_list[ex.clones[j][0].origin_index.unwrap()].clone(),
                );
            } else {
                origins.push("?".to_string());
            }
        }
        let origins_unsorted = origins.clone();
        unique_sort(&mut origins);

        let _exact = format!("{}", origins.iter().format(","));
        (String::new(), origins_unsorted, "cell-exact".to_string())
    } else if vname == "pe" {
        (String::new(), Vec::new(), "cell".to_string())
    } else if vname == "ppe" {
        (String::new(), Vec::new(), "cell".to_string())
    } else if vname == "sec" {
        let mut n = 0;
        let mut y = Vec::<String>::new();
        if ctl.gen_opt.using_secmem {
            for l in 0..ex.clones.len() {
                let li = ex.clones[l][0].dataset_index;
                let bc = &ex.clones[l][0].barcode;
                let mut count = 0;
                if ctl.origin_info.secmem[li].contains_key(&bc.clone()) {
                    count = ctl.origin_info.secmem[li][&bc.clone()].0;
                    n += count;
                }
                y.push(format!("{}", count));
            }
        }

        (format!("{}", n), y, "cell-exact".to_string())
    } else if vname == "sec_cell" {
        let mut n = 0;
        let mut y = Vec::<String>::new();
        if ctl.gen_opt.using_secmem {
            for l in 0..ex.clones.len() {
                let li = ex.clones[l][0].dataset_index;
                let bc = &ex.clones[l][0].barcode;
                let mut count = 0;
                if ctl.origin_info.secmem[li].contains_key(&bc.clone()) {
                    count = ctl.origin_info.secmem[li][&bc.clone()].0;
                    n += count;
                }
                y.push(format!("{}", count));
            }
        }

        let _exact = format!("{}", n);
        (String::new(), y, "cell-exact".to_string())
    } else if vname == "type" {
        let mut cell_types = Vec::<String>::new();
        /*
        for j in 0..ex.clones.len() {
            let mut cell_type = "".to_string();
            let bc = &ex.clones[j][0].barcode;
            let li = ex.clones[j][0].dataset_index;
            if gex_info.cell_type[li].contains_key(&bc.clone()) {
                cell_type = gex_info.cell_type[li][&bc.clone()].clone();
            }
            cell_types.push(cell_type);
        }
        */
        cell_types.sort();

        (abbrev_list(&cell_types), Vec::new(), "exact".to_string())
    } else {
        (
            "$UNDEFINED".to_string(),
            Vec::<String>::new(),
            String::new(),
        )
    };
    if val.0 == "$UNDEFINED" {
        return Ok(false);
    } else {
        let (exact, cell, level) = &val;
        if level == "cell" && !var.ends_with("_cell") {
            if verbose {
                eprint!("lvar {} ==> {}; ", var, String::new());
                eprintln!("i = {}, lvars.len() = {}", i, lvars.len());
            }
            if i < lvars.len() {
                row.push(String::new())
            }
            if pass == 2 {
                speak!(u, abbr.to_string(), String::new());
            }
            stats.push((abbr.to_string(), cell.clone()));
            if pass == 2 {
                speak!(u, abbr, format!("{}", cell.iter().format(POUT_SEP)));
            }
        } else if (exact.len() > 0 && !var.ends_with("_cell")) || cell.len() == 0 {
            if verbose {
                eprint!("lvar {} ==> {}; ", var, exact);
                eprintln!("i = {}, lvars.len() = {}", i, lvars.len());
            }
            if i < lvars.len() {
                row.push(exact.clone())
            }
            if pass == 2 {
                speak!(u, abbr.to_string(), exact.to_string());
            }
            if cell.len() == 0 {
                stats.push((abbr.to_string(), vec![exact.to_string(); ex.ncells()]));
            } else {
                stats.push((abbr.to_string(), cell.to_vec()));
            }
        } else if cell.len() > 0 {
            if pass == 2 {
                speak!(u, abbr, format!("{}", cell.iter().format(POUT_SEP)));
            }
            stats.push((abbr.to_string(), cell.to_vec()));
        }
        return Ok(true);
    }
}
