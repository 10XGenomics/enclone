// Copyright (c) 2020 10X Genomics, Inc. All rights reserved.

// Score antibodies experiment.  Initially restricted to IGH-FWR1-25.

use amino::*;
use enclone_denovo::vdj_features::*;
use fasta_tools::*;
use pretty_trace::*;
use std::cmp::max;
use string_utils::*;
use vector_utils::*;

fn main() {
    PrettyTrace::new().on();

    // Get data from the current denovo references.

    let mut denovo = Vec::<Vec<u8>>::new();
    {
        let dir = "/mnt/deck5/david.jaffe/denovo_ref";
        let refs = std::fs::read_dir(&dir).unwrap();
        for f in refs {
            let f = f.unwrap().path();
            let f = f.to_str().unwrap();
            if !f.contains(":Primate") {
                continue;
            }
            /*
            let mut g = f.rev_after("/").rev_before(".fasta").to_string();
            if g.contains(":") {
                g = format!("{}:{}", g.before(":"), g.rev_after(":"));
            }
            */
            let x = read_fasta_to_vec_vec_u8(&f);
            for i in (0..x.len()).step_by(2) {
                let chain_type = strme(&x[i]).before("V");
                if chain_type == "IGH" {
                    let aa = aa_seq(&x[i+1], 0);
                    let f1 = fwr1(&aa, &chain_type, false).unwrap();
                    if f1.len() == 25 {
                        denovo.push(f1.clone());
                    }
                }
            }
        }
    }

    // Form the distribution for the denovo data.

    let mut dist = vec![Vec::<(u32,u8)>::new(); 25];
    for i in 0..25 {
        let mut x = Vec::<u8>::new();
        for j in 0..denovo.len() {
            x.push(denovo[j][i]);
        }
        x.sort();
        make_freq(&x, &mut dist[i]);
    }

    // Define a scoring function relative to the denovo data.

    fn score(x: &[u8], dist: &Vec<Vec<(u32,u8)>>) -> f64 {
        let mut n = 0;
        for i in 0..dist[0].len() {
            n += dist[0][i].0;
        }
        let mut nlogp = 0.0;
        for i in 0..25 {
            let mut count = 0;
            for j in 0..dist[i].len() {
                if dist[i][j].1 == x[i] {
                    count = dist[i][j].0;
                }
            }
            let frac = max(1, count) as f64 / n as f64;
            nlogp -= frac.log10();
        }
        nlogp
    }

    // Get data from the abcellera human antibody list.

    let mut abcellera = Vec::<Vec<u8>>::new();
    {
        let mut ab = Vec::<Vec<u8>>::new();
        let f = include_str!["../../../antibody_data/thera_sabdab.csv"];
        for line in f.lines() {
            let fields = line.split(',').collect::<Vec<&str>>();
            if fields[6] == "Homo sapiens" {
                if fields[7] != "na" {
                    ab.push(format!("MXXXXXXXXXXXXXXXXXXXX{}", fields[7]).as_bytes().to_vec());
                }
                if fields[10] != "na" {
                    ab.push(format!("MXXXXXXXXXXXXXXXXXXXX{}", fields[10]).as_bytes().to_vec());
                }
            }
        }
        for i in 0..ab.len() {
            let f1 = fwr1(&ab[i], "IGH", false).unwrap();
            if f1.len() == 25 {
                abcellera.push(f1.clone());
            }
        }
    }

    // Get data from AGBT expanded clonotypes.

    let mut agbt = Vec::<Vec<u8>>::new();
    {
        let f = include_str!["../../../antibody_data/agbt.expanded.pout"];
        for line in f.lines() {
            if !line.starts_with("group") {
                let fields = line.split(',').collect::<Vec<&str>>();
                if fields[3].len() == 25 {
                    agbt.push(fields[3].as_bytes().to_vec());
                }
            }
        }
    }

    // Score.

    let mut abcellera_scores = Vec::<f64>::new();
    let mut agbt_scores = Vec::<f64>::new();
    for i in 0..abcellera.len() {
        abcellera_scores.push(score(&abcellera[i], &dist));
    }
    
    for i in 0..agbt.len() {
        agbt_scores.push(score(&agbt[i], &dist));
    }
    abcellera_scores.sort_by(|a, b| a.partial_cmp(b).unwrap());
    agbt_scores.sort_by(|a, b| a.partial_cmp(b).unwrap());
    println!("median abcellera score = {:.1}", abcellera_scores[abcellera_scores.len()/2]);
    println!("median agbt score = {:.1}", agbt_scores[agbt_scores.len()/2]);
    println!("tenth abcellera score = {:.1}", abcellera_scores[9*abcellera_scores.len()/10]);
    println!("tenth agbt score = {:.1}", agbt_scores[9*agbt_scores.len()/10]);
}
