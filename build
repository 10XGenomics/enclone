#!/bin/csh

# Please see https://10xgenomics.github.io/enclone/pages/auto/dev.html.

# ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓

# Build script for enclone.  The only thing missing from this is to run
# target/debug/merge_html BUILD, 
# however you should only need to do that rarely,
# and if you do need to, "./test" will catch the problem and should tell you what to do.

# WARNING: note harcoding of version15!

# ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓

# partially check prerequisites

foreach pkg (sweep fmt license)
    cargo $pkg --help >& /dev/null
    if ( $status != 0 ) then
        echo "looks like the prereq cargo $pkg is missing; try cargo install cargo-$pkg"
        exit 1
    endif
end

# ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓

# import and update enclone-data

set begin = `date +%s`
if ( !(-d enclone-data) ) then
    git clone --depth=1 https://github.com/10XGenomics/enclone-data.git
    if ( $status != 0 ) then
        exit 1
    endif
endif
if !(-f stamps/data_version_in_use) then
    echo none > stamps/data_version_in_use
endif
if ( `cat stamps/data_version` != `cat stamps/data_version_in_use` ) then
    echo "starting data update, interrupt not recommended"
    set begin_fetch = `date +%s`
    git -C enclone-data fetch --depth=1 origin `cat stamps/data_version`
    set end_fetch = `date +%s`
    set elapsed_fetch = `expr $end_fetch - $begin_fetch`
    echo "fetch took $elapsed_fetch seconds"
    git -C enclone-data switch --detach FETCH_HEAD
    cat stamps/data_version > stamps/data_version_in_use
    echo "data update complete"
endif

# ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓

# make outputs

echo "making outputs"
mkdir -p enclone_main/testx/outputs

# ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓

# run rustfmt

echo "formatting"
cargo fmt --all
if ( $status != 0 ) then
    exit 1
endif

# ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓

# cargo update once a week
#
# One reason we do this is that we don't want to accidentally get to a state where cargo update
# is impossible.
#
# Note that this includes fidgety down-versioning of crates.
#
# If running this causes problems, you can just "git checkout Cargo.lock" to undo the change.

# echo "updating"
# set last    = `cat stamps/last_cargo_update`
# set now     = `date +%s`
# set elapsed = `expr $now - $last`
# if ( $elapsed > 604800 ) then
#     echo "\nrunning cargo update, as it has been more than one week since it was last done"
#     echo "this could cause problems\n"
#     echo "INTERRUPTING THE UPDATE IS PROBABLY NOT A GOOD IDEA"
#     ./update_enclone
#     if ( $status != 0 ) then
#         exit 1
#     endif
#     echo $now > stamps/last_cargo_update
#     echo "UPDATE COMPLETE"
# endif

# ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓

# compile rust code

cargo b
if ( $status != 0 ) then
    exit 1
endif
rehash

# ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓

# build help pages

target/debug/build_help_pages
if ( $status != 0 ) then
    exit 1
endif

# ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓

# merge html pages

target/debug/merge_html
if ( $status != 0 ) then
    exit 1
endif

# ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓

# update dataset checksums

git -C enclone-data write-tree --prefix=big_inputs/version15/123085 > datasets_small_checksum
git -C enclone-data write-tree --prefix=big_inputs/version15 > datasets_medium_checksum

# ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓

# sweep, to prevent target from becoming gigantic over time
#
# The cap is set at about 15 GB.  Using 10 GB is definitely too low.  The sweep is run at most 
# once per day.
#
# There is a file stamps/last_sweep that is NOT under git control, and should not be, because
# each user needs to have their own file.

set start         = `date +%s`
if !( -f stamps/last_sweep) then
    echo 0 > stamps/last_sweep
endif
set last_sweep    = `cat stamps/last_sweep`
set elapsed_sweep = `expr $start - $last_sweep`
if ( $elapsed_sweep > 86400 ) then
    cargo sweep --maxsize 10000 > /dev/null
    if ( $status != 0 ) then
        echo "sweep failed, please try rerunning by hand"
        echo "or perhaps you need to \"cargo install cargo-sweep\""
        exit 1
    endif
    set stop = `date +%s`
    set sweep_time = `expr $stop - $start`
    echo "sweep took $sweep_time seconds"
    echo $stop > stamps/last_sweep
endif
set end = `date +%s`
set used = `expr $end - $begin`
echo "build used $used seconds in total"

